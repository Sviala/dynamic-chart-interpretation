{"cells":[{"cell_type":"markdown","metadata":{"id":"SRLmkqrHBQS2"},"source":["## MSDS AI Capstone: Visual QUestion Answering on Chart Data\n","<div class=\"alert alert-block alert-success\">\n","    <b>More Technical</b>: Throughout the notebook. This types of boxes provide more technical details and extra references about what you are seeing. They contain helpful tips, but you can safely skip them the first time you run through the code.\n","</div><br>"]},{"cell_type":"markdown","metadata":{"id":"v2-7tctUBQS2"},"source":["Images in the FigureQA dataset are comprised on five types of figures commonly found in analytical documents. Fifteen question types were selected for the dataset concerning quantitative attributes in relational global and one-vs-one contexts. These include properties like minimum and maximum, greater and less than, medians, curve roughness, and area under the curve (AUC). All questions in the training and validation sets have either a yes or no answer."]},{"cell_type":"markdown","metadata":{"id":"pNvM9PVNAIyq"},"source":["<div class=\"alert alert-block alert-info\">\n","<b>The FigureQA dataset</b><br>\n","https://www.microsoft.com/en-us/research/project/figureqa-dataset/\n","    </div>"]},{"cell_type":"markdown","metadata":{"id":"yIDm78WyBQS3"},"source":["## Import and Verify TensorFlow, Keras, and Torch Versions"]},{"cell_type":"code","source":["#downgrade tensorflow version so keras can be stable (he latets version which is 2.14.0 was not working well with keras - we should use 2.12.0)\n","#uncomment lines below to do so, then restart the run timee after and comemnt it out before re running this cell\n","#!pip install tensorflow==2.12.0 --ignore-installed --user\n","\n","import tensorflow as tf\n","\n","print(\"TensorFlow version: \", tf.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"71ZRNQ2zrFmK","executionInfo":{"status":"ok","timestamp":1701053664039,"user_tz":480,"elapsed":3034,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"aaca8bde-d65d-40b5-e1ae-c6b48e293e4a"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["TensorFlow version:  2.12.0\n"]}]},{"cell_type":"code","source":["#import keras\n","from tensorflow import keras\n","from tensorflow.keras import models, layers\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPool2D, BatchNormalization, Dropout, Flatten, Dense\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n"],"metadata":{"id":"BOUZrz1ZrYFV","executionInfo":{"status":"ok","timestamp":1701053666667,"user_tz":480,"elapsed":283,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["print(\"Keras version: \", tf.keras.__version__)"],"metadata":{"id":"6VN_O1PW57CZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701053667407,"user_tz":480,"elapsed":161,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"ae58a4c3-1736-43ac-a09d-b32af37b0ccb"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Keras version:  2.12.0\n"]}]},{"cell_type":"code","source":["import torch\n","from torchvision import transforms\n","\n","print(\"Torch version: \", torch.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nnpN396GavLD","executionInfo":{"status":"ok","timestamp":1701053674288,"user_tz":480,"elapsed":5523,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"c9b90e5e-acd8-4f90-8665-0c35e8a98256"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Torch version:  2.1.0+cu118\n"]}]},{"cell_type":"markdown","metadata":{"id":"sSPcQhKUBQS2"},"source":["## Imports"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":2074,"status":"ok","timestamp":1701053684005,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"},"user_tz":480},"id":"eHmjw7WoBQS2","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e0b3f244-8f09-46dd-dad4-9bcc1a1027fe"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]}],"source":["import numpy as np\n","import pandas as pd\n","from packaging import version\n","\n","import os\n","\n","from sklearn.manifold import TSNE\n","\n","from sklearn.metrics import confusion_matrix, classification_report\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import mean_squared_error as MSE\n","from sklearn.model_selection import train_test_split\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import matplotlib as mpl\n","\n","import nltk\n","nltk.download('punkt')\n","import re\n","import string\n","from nltk.tokenize import word_tokenize\n","\n","import math\n","from itertools import permutations\n","from scipy.stats import rankdata"]},{"cell_type":"code","source":["#package for OCR\n","!sudo apt install tesseract-ocr\n","!pip install pytesseract\n","\n","#instal pytesseract\n","import pytesseract\n","import shutil\n","import imutils\n","import cv2\n","import os\n","import random\n","try:\n"," from PIL import Image\n","except ImportError:\n"," import Image\n","\n","#if needed ot isntall to run code direcltly in jupyter notebook instead of google collab, follow thos instructiosn instead: https://stackoverflow.com/questions/50951955/pytesseract-tesseractnotfound-error-tesseract-is-not-installed-or-its-not-i"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2mwsNbWlPCjI","executionInfo":{"status":"ok","timestamp":1701053694529,"user_tz":480,"elapsed":9781,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"2f95a150-16d7-4df8-c968-2e103fb3bafb"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","The following additional packages will be installed:\n","  tesseract-ocr-eng tesseract-ocr-osd\n","The following NEW packages will be installed:\n","  tesseract-ocr tesseract-ocr-eng tesseract-ocr-osd\n","0 upgraded, 3 newly installed, 0 to remove and 10 not upgraded.\n","Need to get 4,816 kB of archives.\n","After this operation, 15.6 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy/universe amd64 tesseract-ocr-eng all 1:4.00~git30-7274cfa-1.1 [1,591 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu jammy/universe amd64 tesseract-ocr-osd all 1:4.00~git30-7274cfa-1.1 [2,990 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu jammy/universe amd64 tesseract-ocr amd64 4.1.1-2.1build1 [236 kB]\n","Fetched 4,816 kB in 0s (10.8 MB/s)\n","debconf: unable to initialize frontend: Dialog\n","debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 78, <> line 3.)\n","debconf: falling back to frontend: Readline\n","debconf: unable to initialize frontend: Readline\n","debconf: (This frontend requires a controlling tty.)\n","debconf: falling back to frontend: Teletype\n","dpkg-preconfigure: unable to re-open stdin: \n","Selecting previously unselected package tesseract-ocr-eng.\n","(Reading database ... 120880 files and directories currently installed.)\n","Preparing to unpack .../tesseract-ocr-eng_1%3a4.00~git30-7274cfa-1.1_all.deb ...\n","Unpacking tesseract-ocr-eng (1:4.00~git30-7274cfa-1.1) ...\n","Selecting previously unselected package tesseract-ocr-osd.\n","Preparing to unpack .../tesseract-ocr-osd_1%3a4.00~git30-7274cfa-1.1_all.deb ...\n","Unpacking tesseract-ocr-osd (1:4.00~git30-7274cfa-1.1) ...\n","Selecting previously unselected package tesseract-ocr.\n","Preparing to unpack .../tesseract-ocr_4.1.1-2.1build1_amd64.deb ...\n","Unpacking tesseract-ocr (4.1.1-2.1build1) ...\n","Setting up tesseract-ocr-eng (1:4.00~git30-7274cfa-1.1) ...\n","Setting up tesseract-ocr-osd (1:4.00~git30-7274cfa-1.1) ...\n","Setting up tesseract-ocr (4.1.1-2.1build1) ...\n","Processing triggers for man-db (2.10.2-1) ...\n","Collecting pytesseract\n","  Downloading pytesseract-0.3.10-py3-none-any.whl (14 kB)\n","Requirement already satisfied: packaging>=21.3 in /root/.local/lib/python3.10/site-packages (from pytesseract) (23.2)\n","Requirement already satisfied: Pillow>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from pytesseract) (9.4.0)\n","Installing collected packages: pytesseract\n","Successfully installed pytesseract-0.3.10\n"]}]},{"cell_type":"code","execution_count":7,"metadata":{"id":"_cXetOQXBQS3","executionInfo":{"status":"ok","timestamp":1701053694529,"user_tz":480,"elapsed":11,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"outputs":[],"source":["%matplotlib inline\n","np.set_printoptions(precision=3, suppress=True)"]},{"cell_type":"markdown","metadata":{"id":"ApjAZzsZBQS6"},"source":["## Mount Google Cloud Sotrage Bucket to Colab Environment\n","\n","Follow the isntructions here: https://colab.research.google.com/notebooks/snippets/gcs.ipynb#scrollTo=X0WH8rvDBtiG\n","\n","Decided to use a GCP bucket instead of google drive because the train data has 100K images, which crashed the Google Drive mount in Colab\n","\n","\n","First, open run the following commands in a code block. The code will return a link for you to log in as a gmail user, and copy an verification code to authenticate yourself."]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":15516,"status":"ok","timestamp":1701053710035,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"},"user_tz":480},"id":"UqJfFzLIBQS6","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8bb24e53-2c4c-41e6-e77b-3cdd7487f8c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Updated property [core/project].\n"]}],"source":["from google.colab import auth\n","\n","auth.authenticate_user()\n","\n","project_id = 'msds-ai-capstone-chart-vqa'\n","!gcloud config set project {project_id}"]},{"cell_type":"markdown","source":["You can use Cloud Storage FUSE to mount a Cloud Storage location to access it directly as a local filesystem path.\n","\n","Run the following commands to install gcsfuse."],"metadata":{"id":"NvYrgjxZ1-xW"}},{"cell_type":"code","source":["# Install Cloud Storage FUSE.\n","!echo \"deb https://packages.cloud.google.com/apt gcsfuse-`lsb_release -c -s` main\" | sudo tee /etc/apt/sources.list.d/gcsfuse.list\n","!curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\n","!apt -qq update && apt -qq install gcsfuse"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"abow4aCR2Gt9","executionInfo":{"status":"ok","timestamp":1701053718069,"user_tz":480,"elapsed":8041,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"23533299-8462-42d1-8ffe-79737827d897"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["deb https://packages.cloud.google.com/apt gcsfuse-jammy main\n","  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).\n","100  2659  100  2659    0     0  25805      0 --:--:-- --:--:-- --:--:-- 26068\n","OK\n","32 packages can be upgraded. Run 'apt list --upgradable' to see them.\n","\u001b[1;33mW: \u001b[0mhttps://packages.cloud.google.com/apt/dists/gcsfuse-jammy/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.\u001b[0m\n","The following NEW packages will be installed:\n","  gcsfuse\n","0 upgraded, 1 newly installed, 0 to remove and 32 not upgraded.\n","Need to get 5,561 kB of archives.\n","After this operation, 0 B of additional disk space will be used.\n","Selecting previously unselected package gcsfuse.\n","(Reading database ... 120927 files and directories currently installed.)\n","Preparing to unpack .../gcsfuse_1.2.1_amd64.deb ...\n","Unpacking gcsfuse (1.2.1) ...\n","Setting up gcsfuse (1.2.1) ...\n"]}]},{"cell_type":"code","source":["# Mount a Cloud Storage bucket or location, without the gs:// prefix.\n","mount_path = \"dynamic-chart-vqa-train-data\"  # or a location like \"my-bucket/path/to/mount\"\n","local_path = f\"/mnt/gs/{mount_path}\"\n","\n","!mkdir -p {local_path}\n","!gcsfuse --implicit-dirs {mount_path} {local_path}"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cma_x84r3VEl","executionInfo":{"status":"ok","timestamp":1701053718485,"user_tz":480,"elapsed":420,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"d9a9e71c-87a4-45b7-d4a2-2aec1da0c09e"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["{\"time\":\"27/11/2023 02:55:17.574029\",\"severity\":\"INFO\",\"msg\":\"Start gcsfuse/1.2.1 (Go version go1.21.3) for app \\\"\\\" using mount point: /mnt/gs/dynamic-chart-vqa-train-data\\n\"}\n"]}]},{"cell_type":"code","source":["# Then you can access it like a local path.\n","!ls -lh {local_path}"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4RKBxF8Q3fdq","executionInfo":{"status":"ok","timestamp":1701053718706,"user_tz":480,"elapsed":222,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"dbc71dd0-d168-48fa-97a2-382cd622d8eb"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["total 98M\n","drwxr-xr-x 1 root root   0 Nov 27 02:55 configs\n","drwxr-xr-x 1 root root   0 Nov 27 02:55 experiments\n","drwxr-xr-x 1 root root   0 Nov 27 02:55 models\n","-rw-r--r-- 1 root root 98M Jan 16  2021 pretrained.tar.gz\n","drwxr-xr-x 1 root root   0 Nov 27 02:55 sample_train1\n","drwxr-xr-x 1 root root   0 Nov 27 02:55 test\n","drwxr-xr-x 1 root root   0 Nov 27 02:55 train1\n","drwxr-xr-x 1 root root   0 Nov 27 02:55 validation1\n"]}]},{"cell_type":"markdown","source":["## Module 1 Utility Functions - Chart Type Prediction and Question generation & encoding\n","\n"],"metadata":{"id":"e_A5YjS_MWRS"}},{"cell_type":"code","source":["#utility funtion to apply OCR and extract the color labels and their position\n","#may consider to apply grayscaling andother preprocessing techniques as a future enhancement: https://stackoverflow.com/questions/37745519/use-pytesseract-ocr-to-recognize-text-from-an-image\n","\n","\n","from math import sqrt\n","\n","pytesseract.pytesseract.tesseract_cmd = (\n","    r'/usr/bin/tesseract'\n",")\n","\n","def extract_OCR_info(img_name):\n","  #intiiate variables\n","  text_combined = []\n","  x_combined = []\n","  y_combined = []\n","  x2_combined = []\n","  y2_combined = []\n","  #load image and apply pytesseract\n","  img = Image.open(img_name)\n","  data = pytesseract.image_to_data(img, output_type='dict')\n","  boxes = len(data['level'])\n","  #extract text labels and x_y coordinates for each label\n","  for i in range(boxes):\n","    if len([x for x in data['text'][i] if x.isalpha()]) > 2: #only keep the words with at least 3 alphabetical characters\n","      if (\"title\" not in data['text'][i]) and (\"axis\" not in data['text'][i]) and (\"label\" not in data['text'][i]) and (\"tut\" not in (data['text'][i]).lower()) and (\"shea\" not in (data['text'][i]).lower()): #removing some common mis-extarction from the train & validation images\n","        text_result = data['text'][i] #text label value obtained via OCR\n","        x_result = data['left'][i] #x-coordinate value of the top left corner of the bounding box for the text label\n","        y_result = data['top'][i] #y-coordinate value of the top left corner of the bounding box for the text label\n","        x2_result = x_result + data['width'][i] #the max x-coordinate value, based on the top left corner of the bounding box for the text label, plus the width ofthe box\n","        y2_result = y_result + data['height'][i] #the max y-coordinate value, based on the top left corner of the bounding box for the text label, plus the height of the box\n","        text_combined.append(text_result)\n","        x_combined.append(x_result)\n","        y_combined.append(y_result)\n","        x2_combined.append(x2_result)\n","        y2_combined.append(y2_result)\n","  x_y_combined = list(zip(x_combined,y_combined))\n","  x2_y2_combined = list(zip(x2_combined,y2_combined))\n","  return text_combined,x_y_combined,x2_y2_combined,x_combined,y_combined,x2_combined,y2_combined\n","      #result = i.get('labels')\n","      #train_label_name.append(result)\n","\n","\n","#Compute a Matrix similarity of distances bewteen 2 label bounding boxes\n","def calc_sim(text1_x,text1_x2,text1_y,text1_y2,text2_x,text2_x2,text2_y,text2_y2):\n","    x_dist = min(abs(text1_x-text2_x), abs(text1_x-text2_x2), abs(text1_x2-text2_x), abs(text1_x2-text2_x2)) #we keep the closest points only, by first checking the cloest x coordinates\n","    y_dist = min(abs(text1_y-text2_y), abs(text1_y-text2_y2), abs(text1_y2-text2_y), abs(text1_y2-text2_y2)) #we keep the closest points only, by tnow chekcing the closest y coordinates\n","\n","    dist = sqrt((x_dist)^2 + (y_dist)^2) #calculate the distance bctewene the 2 cloest points form the 2 bounding boxes\n","\n","    return dist\n","\n","#Principal algorithm for merge text and ot return encoded value\n","def local_dynamic_dict(img,dist_limit):\n","  #initialize variables\n","    extract_OCR = extract_OCR_info(img)\n","    texts = extract_OCR[0]\n","    x_y_coordinate = extract_OCR[1] # the x y coordinates of the top left corner of the bounding boxes\n","    text_x = extract_OCR[3] # x coordinate of top left corner of bounding boxes\n","    text_x2 = extract_OCR[5] # y coordinate of top left corner of bounding boxes\n","    text_y = extract_OCR[4]  # x coordinare of top right corner of bb\n","    text_y2 = extract_OCR[6] # y coordinate of bottom left corner of bb\n","    new_text = [w.lower() for w in texts] # a placehodler list, which we will save the final combined color names. this has been lowercased\n","    new_x_y_coordinates =  x_y_coordinate.copy()\n","    distances = []\n","    idx_to_remove = []\n","  #start loop\n","    for i,j in permutations(list(range(0,len(texts))),2):\n","      if j > i: #to ensure that the labels are combined inthe right order (ex: Light Blue not Blue Light)\n","        # Evaluate if the distanc ebetween 2 labels' bounding boxes is less than disctance limit defined\n","        if calc_sim(text_x[i],text_x2[i],text_y[i],text_y2[i],text_x[j],text_x2[j],text_y[j],text_y2[j]) < dist_limit:\n","          #print(calc_sim(text_x[i],text_x2[i],text_y[i],text_y2[i],text_x[j],text_x2[j],text_y[j],text_y2[j]))\n","          #print(x_coord[i],x2_coord[i],y_coord[i],y2_coord[i], x_coord[j],x2_coord[j],y_coord[j],y2_coord[j])\n","        # if true, create a new text string whch joins the 2 text labels\n","          new_text[i] = texts[i].lower() + '_' + texts[j].lower()\n","          idx_to_remove.append(j) #index of the j text label values that we will need to remove after (because they are alreadt merged under the i+j labels)\n","          try:\n","              new_x_y_coordinates.remove(x_y_coordinate[j]) #drop the coordinate associated with label j so we retainthe corodinate from label i as the coordinate from the new i+j merged label\n","          except ValueError:\n","              pass  # do nothing!\n","    #filter out the redundant j text value from the final list\n","    final_text = [j for i,j in enumerate(new_text) if i not in idx_to_remove]\n","    #now give a number to each label based on how close/far it is from the point (0,0) on the chart\n","    for i in range(0,len(new_x_y_coordinates)):\n","      dist_from_origin = math.dist((0,0), new_x_y_coordinates[i]) #calcuulate distance from origin\n","      distances.append(dist_from_origin) #collect all distances for all labels\n","    encoded_value = rankdata(list(map(lambda x: x, distances)), method='ordinal') #apply ranking to return a integer based on how small the distance from origins are\n","\n","    #combine OCR words and their index into dictionnary\n","    local_dict = {final_text[i]: encoded_value[i] for i in range(len(final_text))}\n","\n","    return local_dict,final_text,new_x_y_coordinates,encoded_value\n"],"metadata":{"id":"Qkq0IEf-wByr","executionInfo":{"status":"ok","timestamp":1701053718706,"user_tz":480,"elapsed":4,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["#Utility function ot preprocess image for the chart type model\n","\n","IMG_SIZE=(128,128)\n","image_pad_size=[128, 128]\n","\n","#Function to load and decode the image from the file path\n","def preprocess_images_only(im):\n","    im=tf.io.read_file(im)\n","    im=tf.image.decode_png(im,channels=3)\n","    h, w = tf.unstack(tf.cast(tf.shape(im)[:2], tf.float32))\n","    target_h, target_w = IMG_SIZE\n","    aspect_ratio = w / h\n","    w_ratio = target_w / w\n","    h_ratio = target_h / h\n","    target_aspect_ratio = float(target_w) / target_h\n","    im = tf.cond(tf.greater(aspect_ratio, target_aspect_ratio),\n","                 lambda: tf.image.resize(\n","                    im, size=(tf.cast(w_ratio * h, tf.int32),\n","                              tf.cast(target_w, tf.int32))\n","                    ),\n","                 lambda: tf.image.resize(\n","                    im, size=(tf.cast(target_h, tf.int32),\n","                              tf.cast(h_ratio * w, tf.int32))\n","                    )\n","                 )\n","    im = tf.image.resize_with_crop_or_pad(\n","        im, target_height=target_h, target_width=target_w\n","        )\n","    im.set_shape((target_h, target_w, 3))#Explicit shape must be defined in order to create the Input pipeline\n","    im = im / 255.\n","\n","    return im"],"metadata":{"id":"pqiCvywE9-HE","executionInfo":{"status":"ok","timestamp":1701053719505,"user_tz":480,"elapsed":191,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["##################################\n","##########  FINAL  ###############\n","###################################\n","\n","#utility function to predict the chart type, generate questions based onit and encode those questions based on the training\n","\n","import itertools\n","\n","def generating_questions(img_name,global_dictionnary,padding_length,dist_limit):\n","  #Preprocess image for input in the chart type prediction model\n","  preprocess_im = preprocess_images_only(img_name)\n","  #change its shape from (128,128,3) to (1,128,128,3) since this is the shape the model expects (since it was trained on a batched dataset and that first dimension represents the batch size)\n","  preprocess_im = tf.expand_dims(preprocess_im, 0)\n","  #load chart type model\n","  model_chart_type = tf.keras.models.load_model(\"/mnt/gs/dynamic-chart-vqa-train-data/models/chart_type_model_simple.h5\")\n","  #return chart type prediction\n","  preds = model_chart_type.predict(preprocess_im)\n","  pred=np.argmax(preds, axis=1) #only retain the predicted class with the highest probability for each observation in the test dataset\n","  pred = pred[0] #format the predicted cass as just a integer value as oppsoed to as an array holding this value\n","\n","  #OCR labels extraction to generate local dictionnary\n","  local_dictionnary = local_dynamic_dict(img_name,dist_limit)[0]\n","  labels = local_dynamic_dict(img_name,dist_limit)[1]\n","  #generate questions based on chart type\n","  all_questions = []\n","\n","  if pred in (1,3,4): #if it is a vertical bar chart, horizontal bar chart, or pie chart\n","    for label in labels:\n","      quest1 = ['is',label,'the','maximum']\n","      quest2 = ['is',label,'the','minimum']\n","      quest3 = ['is',label,'the','low','median']\n","      quest4 = ['is',label,'the','high','median']\n","      questions_merged =  [quest1] + [quest2] + [quest3] + [quest4]\n","      all_questions = all_questions + questions_merged\n","    for i,j in list(itertools.product(labels, labels)):\n","      if i != j:\n","        quest5 = ['is',i,'greater','than',j]\n","        quest6 = ['is',i,'less','than',j]\n","        questions_merged =  [quest5] + [quest6]\n","        all_questions = all_questions + questions_merged\n","  if pred in (0,2): #if it is a dot line or line\n","    for label in labels:\n","      quest1 = ['does',label,'have','the','maximum','area','under','the','curve']\n","      quest2 = ['does',label,'have','the','minimum','area','under','the','curve']\n","      quest3 = ['is',label,'the','smoothest']\n","      quest4 = ['is',label,'the','roughest']\n","      quest5 = ['does',label,'have','the','lowest','value']\n","      quest6 = ['does',label,'have','the','highest','value']\n","      questions_merged =  [quest1] + [quest2] + [quest3] + [quest4] + [quest5] + [quest6]\n","      all_questions = all_questions + questions_merged\n","    for i,j in list(itertools.product(labels, labels)):\n","      if i != j:\n","        quest7 = ['is',i,'greater','than',j]\n","        quest8 = ['is',i,'less','than',j]\n","        quest9 = ['does',j,'intersect',i]\n","        questions_merged =  [quest7] + [quest8] + [quest9]\n","        all_questions = all_questions + questions_merged\n","    #combine local dictionnary with global dictionnary\n","  dictionnary = global_dictionnary | local_dictionnary\n","  #encode the tokenized question with the indexes from the combined dictionnary\n","  encoded_questions = []\n","  for i in range(0,len(all_questions)):\n","    for key, value in dictionnary.items():\n","      newlist=map(lambda x: dictionnary[x], all_questions[i])\n","      newlist=list(newlist)\n","    encoded_questions.append(newlist)\n","  encoded_questions_final = np.array([np.pad(row, (0, padding_length-len(row))) for row in encoded_questions])\n","\n","  img_name_array = [img_name]*len(encoded_questions_final)\n","  question_index = list(range(0,len(encoded_questions_final)))\n","\n","  print('this graph is a ',chart_type_decoding_values[pred], 'chart')\n","  print('this chart contains the labels',labels)\n","  return all_questions,encoded_questions_final,img_name_array,question_index\n","\n"],"metadata":{"id":"evngiT5HHd6_","executionInfo":{"status":"ok","timestamp":1701053721206,"user_tz":480,"elapsed":139,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["## Module 2 Utility Functions: Chart VQA Model"],"metadata":{"id":"p9jH9O9_VYlS"}},{"cell_type":"code","source":["#preprocessing function for image and question for input into the chart VQA model\n","BATCH_SIZE = 64\n","IMG_SIZE_VQA=(224,320) #using the PreFil config details (https://github.com/kushalkafle/PReFIL/blob/main/configs/config_FigureQA.py)\n","\n","from torch.utils.data import TensorDataset, DataLoader\n","from PIL import Image\n","from torch.utils.data import Dataset\n","\n","os.chdir('/')\n","\n","data_transform = transforms.Compose([\n","    transforms.Resize(IMG_SIZE_VQA),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.9365, 0.9303, 0.9295],\n","                         std=[1, 1, 1])])\n","\n","def encode_answers(answer):\n","  a = torch.zeros((1,))\n","  if answer == 1:\n","    a[0] = 0.0\n","  elif answer == 0:\n","    a[0] = 1.0\n","  else:\n","    a[0] = 'something_wrong'\n","  return a\n","\n","def collate_batch(data_batch):\n","    data_batch.sort(key=lambda x: x[-1], reverse=True)\n","    return torch.utils.data.dataloader.default_collate(data_batch)\n","\n","\n","class ImageDataset(Dataset):\n","    def __init__(self, image_fnames,encoded_question,encoded_answers,quest_index,split):\n","        self.image_fnames = image_fnames\n","        self.encoded_question = encoded_question\n","        self.encoded_answers = encoded_answers\n","        self.prep = data_transform\n","        self.quest_index = quest_index\n","        self.split = split\n","\n","    def __len__(self):\n","        return len(self.image_fnames)\n","\n","    def __getitem__(self, index):\n","          question_tensor = torch.Tensor(self.encoded_question[index]).long()\n","          q_len = len(self.encoded_question[index])\n","          quest_index = self.quest_index[index]\n","          if 'train' in self.split:\n","            img_path = os.path.join('/mnt/gs/dynamic-chart-vqa-train-data/train1/png/',\n","                                  self.image_fnames[index])\n","            img = Image.open(img_path).convert('RGB')\n","            img_tensor = self.prep(img)\n","            answer_tensor = encode_answers(self.encoded_answers[index])\n","          if 'validation' in self.split:\n","            img_path = os.path.join('/mnt/gs/dynamic-chart-vqa-train-data/validation1/png/',\n","                                  self.image_fnames[index])\n","            img = Image.open(img_path).convert('RGB')\n","            img_tensor = self.prep(img)\n","            answer_tensor = encode_answers(self.encoded_answers[index])\n","          if 'test' in self.split:\n","            img_path = os.path.join('/mnt/gs/dynamic-chart-vqa-train-data/test/',\n","                                  self.image_fnames[index])\n","            img = Image.open(img_path).convert('RGB')\n","            img_tensor = self.prep(img)\n","            answer_tensor = torch.zeros((1,))\n","\n","          return img_tensor,question_tensor,answer_tensor,q_len, quest_index\n","\n"],"metadata":{"id":"kJXUPB7YVrye","executionInfo":{"status":"ok","timestamp":1701053724229,"user_tz":480,"elapsed":146,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["#Uyility function to build the VQA model\n","\n","#inpo: https://github.com/kushalkafle/PReFIL/tree/main\n","\n","from collections import OrderedDict\n","\n","from torch import nn\n","from torchvision.models.densenet import _DenseBlock, _Transition\n","from torch.nn.utils.rnn import pack_padded_sequence\n","\n","\n","\n","\n","# Denset Net Model\n","\n","class DenseNet(nn.Module):\n","    r\"\"\"Densenet-BC model class, based on\n","    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n","    Args:\n","        growth_rate (int) - how many filters to add each layer (`k` in paper)\n","        block_config (list of 4 ints) - how many layers in each pooling block\n","        num_init_features (int) - the number of filters to learn in the first convolution layer\n","        bn_size (int) - multiplicative factor for number of bottle neck layers\n","          (i.e. bn_size * k features in the bottleneck layer)\n","        drop_rate (float) - dropout rate after each dense layer\n","        num_classes (int) - number of classification classes\n","    \"\"\"\n","\n","    def __init__(self, growth_rate=32, block_config=(6, 6, 6),\n","                 num_init_features=64, bn_size=4, drop_rate=0, num_classes=1000):\n","\n","        super(DenseNet, self).__init__()\n","        self.block_config = block_config\n","        # First convolution\n","        self.first_conv = nn.Sequential(OrderedDict([\n","            ('conv0', nn.Conv2d(3, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)),\n","            ('norm0', nn.BatchNorm2d(num_init_features)),\n","            ('relu0', nn.ReLU(inplace=True)),\n","            ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1)),\n","        ]))\n","\n","        self.denseblock = []\n","        # Each denseblock\n","        num_features = num_init_features\n","        for i, num_layers in enumerate(block_config):\n","            block = _DenseBlock(num_layers=num_layers, num_input_features=num_features,\n","                                bn_size=bn_size, growth_rate=growth_rate, drop_rate=drop_rate)\n","\n","            self.denseblock.append(nn.Sequential(OrderedDict([\n","                (f'dblock{i}', block),\n","            ])))\n","            num_features = num_features + num_layers * growth_rate\n","            if i != len(block_config) - 1:\n","                trans = _Transition(num_input_features=num_features, num_output_features=num_features // 2)\n","                self.denseblock[i].add_module('transition%d' % (i + 1), trans)\n","                num_features = num_features // 2\n","\n","        # Final batch norm\n","        self.final_bn = nn.BatchNorm2d(num_features)\n","\n","        # Official init from torch repo.\n","        for m in self.modules():\n","            if isinstance(m, nn.Conv2d):\n","                nn.init.kaiming_normal_(m.weight)\n","            elif isinstance(m, nn.BatchNorm2d):\n","                nn.init.constant_(m.weight, 1)\n","                nn.init.constant_(m.bias, 0)\n","            elif isinstance(m, nn.Linear):\n","                nn.init.constant_(m.bias, 0)\n","\n","        self.denseblock = nn.ModuleList(self.denseblock)\n","\n","    def forward(self, x):\n","        first_conv_feat = self.first_conv(x)\n","        denseblock_feat = [self.denseblock[0](first_conv_feat)]\n","\n","        for i in range(len(self.block_config) - 1):\n","            denseblock_feat.append(self.denseblock[i + 1](denseblock_feat[i]))\n","        final_feat = self.final_bn(denseblock_feat[-1])\n","        return first_conv_feat, denseblock_feat, final_feat\n","\n","\n","############################################\n","#Rest of the model architecure\n","\n","class QuestionEncoder(nn.Module):\n","    def __init__(self, num_tokens):\n","        super(QuestionEncoder, self).__init__()\n","        self.embedding = nn.Embedding(num_tokens, word_emb_dim)\n","        self.lstm = nn.LSTM(input_size=word_emb_dim,\n","                            hidden_size=ques_lstm_out,\n","                            num_layers=1)\n","\n","    def forward(self, q,q_len=9):\n","        q_embed = self.embedding(q)\n","        packed = pack_padded_sequence(q_embed, q_len.to('cpu'), batch_first=True)\n","        o, (h, c) = self.lstm(packed)\n","        return c.squeeze(0)\n","\n","\n","class DenseNetEncoder(nn.Module):\n","    def __init__(self, densenet_config):\n","        super(DenseNetEncoder, self).__init__()\n","        self.densenet = DenseNet(block_config=densenet_config).cuda()\n","\n","    def forward(self, img):\n","        _, dense, final = self.densenet(img)\n","        return dense[0], dense[1], final\n","\n","\n","class BimodalEmbedding(nn.Module):\n","    def __init__(self, num_mmc_units, ques_dim, img_dim, num_mmc_layers=4):\n","        super(BimodalEmbedding, self).__init__()\n","        self.bn = nn.BatchNorm2d(ques_dim + img_dim)\n","        self.transform_convs = []\n","        self.num_mmc_layers = num_mmc_layers\n","        self.transform_convs.append(nn.Conv2d(ques_dim + img_dim, num_mmc_units, kernel_size=1))\n","        self.transform_convs.append(nn.ReLU())\n","        for i in range(num_mmc_layers - 1):\n","            self.transform_convs.append(nn.Conv2d(num_mmc_units, num_mmc_units, kernel_size=1))\n","            self.transform_convs.append(nn.ReLU())\n","        self.transform_convs = nn.Sequential(*self.transform_convs)\n","\n","    def forward(self, img_feat, ques_feat):\n","        # Tile ques_vector, concatenate\n","        _, _, nw, nh = img_feat.shape\n","        _, qdim = ques_feat.shape\n","        ques_feat = ques_feat.unsqueeze(2)\n","        ques_tile = ques_feat.repeat(1, 1, nw * nh)\n","        ques_tile = ques_tile.view(-1, qdim, nw, nh)\n","        combine_feat = self.bn(torch.cat([img_feat, ques_tile], dim=1))\n","        bimodal_emb = self.transform_convs(combine_feat)\n","        return bimodal_emb\n","\n","\n","class Classifier(nn.Module):\n","    def __init__(self, num_classes, feat_in):\n","        super(Classifier, self).__init__()\n","        self.relu = nn.ReLU(inplace=True)\n","        self.lin1 = nn.Linear(feat_in, num_hidden_act)\n","        self.classifier = nn.Linear(num_hidden_act, num_classes)\n","        self.drop = nn.Dropout()\n","        self.use_drop = dropout_classifier\n","\n","    def forward(self, bimodal_emb):\n","        # Tile ques_vector, concatenate\n","        projection = self.relu(self.lin1(bimodal_emb))\n","        if self.use_drop:\n","            projection = self.drop(projection)\n","        preds = self.classifier(projection)\n","        return preds\n","\n","\n","class RecurrentFusion(nn.Module):\n","    def __init__(self, num_bigru_units, feat_in):\n","        super(RecurrentFusion, self).__init__()\n","        self.bigru = nn.GRU(input_size=feat_in,\n","                            hidden_size=num_bigru_units,\n","                            batch_first=True,\n","                            bidirectional=True)\n","\n","    def forward(self, mmc_feat):\n","        _, fs, nw, nh = mmc_feat.shape\n","        mmc_feat = mmc_feat.view(-1, fs, nw * nh)\n","        mmc_feat = torch.transpose(mmc_feat, 1, 2)\n","        output, h = self.bigru(mmc_feat)\n","        return torch.flatten(torch.transpose(h, 0, 1), start_dim=1)\n","\n","\n","class BasePReFIL(nn.Module):\n","    def __init__(self, num_tokens):\n","        super(BasePReFIL, self).__init__()\n","        self.rnn = QuestionEncoder(num_tokens)\n","        self.cnn = DenseNetEncoder(densenet_config)\n","        img_dims = densenet_dim\n","        self.bimodal_low = BimodalEmbedding(num_bimodal_units, ques_lstm_out, img_dims[0])\n","        self.bimodal_high = BimodalEmbedding(num_bimodal_units, ques_lstm_out, img_dims[2])\n","        self.maxpool_low = nn.MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1)\n","\n","    @staticmethod\n","    def flatten_to_2d(mmc_feat):\n","        return mmc_feat.reshape(-1, mmc_feat.shape[1] * mmc_feat.shape[2] * mmc_feat.shape[3])\n","\n","    def forward(self, img, ques,q_len):\n","        ques_feat = self.rnn(ques, q_len)\n","        feat_low, feat_mid, feat_high = self.cnn(img)\n","        feat_low = self.maxpool_low(feat_low)\n","        bimodal_feat_low = self.bimodal_low(feat_low, ques_feat)\n","        bimodal_feat_high = self.bimodal_high(feat_high, ques_feat)\n","        return bimodal_feat_low, bimodal_feat_high\n","\n","\n","class PReFIL(BasePReFIL):\n","    def __init__(self, num_tokens, num_ans_classes):\n","        super(PReFIL, self).__init__(num_tokens)\n","        self.rf_low = RecurrentFusion(num_rf_out, num_bimodal_units)\n","        self.rf_high = RecurrentFusion(num_rf_out, num_bimodal_units)\n","        self.classifier = Classifier(num_ans_classes, num_rf_out * 4)\n","\n","    def forward(self, img, ques,q_len):\n","        bimodal_feat_low, bimodal_feat_high = super(PReFIL, self).forward(img, ques, q_len)\n","        rf_feat_low = self.rf_low(bimodal_feat_low)\n","        rf_feat_high = self.rf_high(bimodal_feat_high)\n","        final_feat = torch.cat([rf_feat_low, rf_feat_high], dim=1)\n","        answer = self.classifier(final_feat)\n","        return answer\n","\n","\n","def main():\n","    pass\n","\n","\n","if __name__ == '__main___':\n","    main()\n"],"metadata":{"id":"rsyEbgaihXs8","executionInfo":{"status":"ok","timestamp":1701053726536,"user_tz":480,"elapsed":268,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# load training data\n","import json\n","# Change working directory to the GCS mount\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","\n","\n","with open('encoded_train_questions_final.json') as f:\n","    encoded_train_questions_final = np.asarray(json.load(f))\n","\n","with open('encoded_train_answers_final.json') as f:\n","    encoded_train_answers_final = np.asarray(json.load(f))\n","\n","with open('train_images_fnames_to_keep.json') as f:\n","    train_image_fnames_to_keep = np.asarray(json.load(f))\n"],"metadata":{"id":"NZS-cQ7JIZ1_","executionInfo":{"status":"ok","timestamp":1701053733469,"user_tz":480,"elapsed":2027,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["#load validation data\n","\n","import json\n","\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/validation1')\n","\n","with open('encoded_val_questions_final.json') as f:\n","    encoded_val_questions_final = np.asarray(json.load(f))\n","\n","with open('encoded_val_answers_final.json') as f:\n","    encoded_val_answers_final = np.asarray(json.load(f))\n","\n","with open('val_image_fnames_to_keep.json') as f:\n","    val_image_fnames_to_keep = np.asarray(json.load(f))"],"metadata":{"id":"6-RM7yZZEZsj","executionInfo":{"status":"ok","timestamp":1701053734388,"user_tz":480,"elapsed":921,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# creating indexes for the train and valudation datasets\n","\n","#first the train dataset index\n","train_index = np.arange(encoded_train_answers_final.shape[0]) # create index array for indexing\n","\n","#second the val dataset index\n","val_index = np.arange(encoded_val_answers_final.shape[0]) # create index array for indexing"],"metadata":{"id":"FX65qKrpM8Yr","executionInfo":{"status":"ok","timestamp":1701053737289,"user_tz":480,"elapsed":191,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["#The tensor batched training Dataset object is created\n","train_df = ImageDataset(train_image_fnames_to_keep,encoded_train_questions_final,encoded_train_answers_final,train_index,'train') #Preprocessing function is applied to the dataset\n","train_dataset=DataLoader(train_df,BATCH_SIZE,shuffle=True, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n","\n","#The tensor batched training Dataset object is created\n","val_df = ImageDataset(val_image_fnames_to_keep,encoded_val_questions_final,encoded_val_answers_final,val_index,'validation') #Preprocessing function is applied to the dataset\n","validation_dataset=DataLoader(val_df,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"id":"s-PprDVTkzj2","executionInfo":{"status":"ok","timestamp":1701053738110,"user_tz":480,"elapsed":168,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["# Apply to a test image - Simple Bar Chart Example"],"metadata":{"id":"yVo610dGRhOh"}},{"cell_type":"markdown","source":["### Parameters to tweak"],"metadata":{"id":"DI7Fg4yLRmNj"}},{"cell_type":"code","source":["##############################################\n","#######   PARAMETERS TO TWEAK   ##############\n","##############################################\n","\n","#load global dictionnary that was trained on training dataset (build in part 1)\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","with open('global_dictionnary.txt','r') as f:\n","  text = f.read()\n","  global_dictionnary = eval(text)\n","#alternatively, uncomment the below line\n","#global_dictionnary = {'is': 30, 'the': 31, 'minimum': 32, 'maximum': 33, 'greater': 34, 'than': 35, 'less': 36, 'high': 37, 'median': 38, 'low': 39, 'does': 40, 'have': 41, 'area': 42, 'under': 43, 'curve': 44, 'smoothest': 45, 'roughest': 46, 'lowest': 47, 'value': 48, 'highest': 49, 'intersect': 50}\n","\n","\n","# Enter working directory where image to predict is\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/test')\n","#os.chdir('/content/gdrive/MyDrive/NorthWestern University/Course/AI Capstone/Data/datasets/train1/png')\n","\n","# Enter Image name\n","img_name = \"0.png\"\n","\n","#specify lenght for padding (based on trainign dataset from part 1 as well)\n","padding_length = 9\n","\n","#specifcy the distance at which nearby labels in the images hsoud be merged during OCR extraction (ex: merging the words 'organic' and 'search' as a single token 'organic_search')\n","dist_limit=4\n","\n","#change the chart type decoder here if needed (make sure the chart types are in the same order as their encoding in the model)\n","chart_type_decoding_values = ['dot_line','hbar_categorical', 'line','pie','vbar_categorical']"],"metadata":{"id":"DYEoKgcUJ9o7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Run the below cells as is"],"metadata":{"id":"xFysT-U7RpFD"}},{"cell_type":"code","source":["#run as is\n","result = generating_questions(img_name,global_dictionnary,padding_length,dist_limit)\n","\n","#can isolate each output from the function as follows:\n","original_questions = result[0]\n","encoded_questions = result[1]\n","img_name_array = result[2]\n","quest_index = result[3]\n","encoded_answers = torch.zeros((1,)) # WE DO NOT HAVE ANSWERS FOR TEST IMAGES, so passing an empty tensor\n","\n","print(original_questions)\n","print(encoded_questions)\n","print(img_name_array)\n","\n","#The tensor batched training Dataset object is created\n","test_preprocess_input = ImageDataset(img_name_array,encoded_questions,encoded_answers,quest_index,'test') #Preprocessing function is applied to the dataset\n","test_preprocess_input = DataLoader(test_preprocess_input,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V5tQBDPoUIPZ","executionInfo":{"status":"ok","timestamp":1700369997573,"user_tz":480,"elapsed":9895,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"f1bbf21e-5e52-42a4-e075-01adfcc0e477"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 4s 4s/step\n","this graph is a  vbar_categorical chart\n","this chart contains the labels ['light_slate', 'dark_turquoise']\n","[['is', 'light_slate', 'the', 'maximum'], ['is', 'light_slate', 'the', 'minimum'], ['is', 'light_slate', 'the', 'low', 'median'], ['is', 'light_slate', 'the', 'high', 'median'], ['is', 'dark_turquoise', 'the', 'maximum'], ['is', 'dark_turquoise', 'the', 'minimum'], ['is', 'dark_turquoise', 'the', 'low', 'median'], ['is', 'dark_turquoise', 'the', 'high', 'median'], ['is', 'light_slate', 'greater', 'than', 'dark_turquoise'], ['is', 'light_slate', 'less', 'than', 'dark_turquoise'], ['is', 'dark_turquoise', 'greater', 'than', 'light_slate'], ['is', 'dark_turquoise', 'less', 'than', 'light_slate']]\n","[[30  2 31 33  0  0  0  0  0]\n"," [30  2 31 32  0  0  0  0  0]\n"," [30  2 31 39 38  0  0  0  0]\n"," [30  2 31 37 38  0  0  0  0]\n"," [30  1 31 33  0  0  0  0  0]\n"," [30  1 31 32  0  0  0  0  0]\n"," [30  1 31 39 38  0  0  0  0]\n"," [30  1 31 37 38  0  0  0  0]\n"," [30  2 34 35  1  0  0  0  0]\n"," [30  2 36 35  1  0  0  0  0]\n"," [30  1 34 35  2  0  0  0  0]\n"," [30  1 36 35  2  0  0  0  0]]\n","['0.png', '0.png', '0.png', '0.png', '0.png', '0.png', '0.png', '0.png', '0.png', '0.png', '0.png', '0.png']\n"]}]},{"cell_type":"code","source":["#display the image\n","img = load_img(img_name)\n","plt.imshow(img)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":482},"id":"N1zUE3FnK4Mv","executionInfo":{"status":"ok","timestamp":1700373732892,"user_tz":480,"elapsed":440,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"d836b122-c877-472c-ba75-82b611b5ba1a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#check how the VQA input is build\n","next(iter(test_preprocess_input))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VsePmpnjc5W7","executionInfo":{"status":"ok","timestamp":1700370003680,"user_tz":480,"elapsed":807,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"9c382d4c-af2c-4e7c-b407-2b185ca7e852"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[tensor([[[[0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           ...,\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635]],\n"," \n","          [[0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           ...,\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697]],\n"," \n","          [[0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           ...,\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705]]],\n"," \n"," \n","         [[[0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           ...,\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635]],\n"," \n","          [[0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           ...,\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697]],\n"," \n","          [[0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           ...,\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705]]],\n"," \n"," \n","         [[[0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           ...,\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635]],\n"," \n","          [[0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           ...,\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697]],\n"," \n","          [[0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           ...,\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705]]],\n"," \n"," \n","         ...,\n"," \n"," \n","         [[[0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           ...,\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635]],\n"," \n","          [[0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           ...,\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697]],\n"," \n","          [[0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           ...,\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705]]],\n"," \n"," \n","         [[[0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           ...,\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635]],\n"," \n","          [[0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           ...,\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697]],\n"," \n","          [[0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           ...,\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705]]],\n"," \n"," \n","         [[[0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           ...,\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635],\n","           [0.0635, 0.0635, 0.0635,  ..., 0.0635, 0.0635, 0.0635]],\n"," \n","          [[0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           ...,\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697],\n","           [0.0697, 0.0697, 0.0697,  ..., 0.0697, 0.0697, 0.0697]],\n"," \n","          [[0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           ...,\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705],\n","           [0.0705, 0.0705, 0.0705,  ..., 0.0705, 0.0705, 0.0705]]]]),\n"," tensor([[30,  1, 36, 35,  2,  0,  0,  0,  0],\n","         [30,  1, 34, 35,  2,  0,  0,  0,  0],\n","         [30,  2, 36, 35,  1,  0,  0,  0,  0],\n","         [30,  2, 34, 35,  1,  0,  0,  0,  0],\n","         [30,  1, 31, 37, 38,  0,  0,  0,  0],\n","         [30,  1, 31, 39, 38,  0,  0,  0,  0],\n","         [30,  1, 31, 32,  0,  0,  0,  0,  0],\n","         [30,  1, 31, 33,  0,  0,  0,  0,  0],\n","         [30,  2, 31, 37, 38,  0,  0,  0,  0],\n","         [30,  2, 31, 39, 38,  0,  0,  0,  0],\n","         [30,  2, 31, 32,  0,  0,  0,  0,  0],\n","         [30,  2, 31, 33,  0,  0,  0,  0,  0]]),\n"," tensor([[0.],\n","         [0.],\n","         [0.],\n","         [0.],\n","         [0.],\n","         [0.],\n","         [0.],\n","         [0.],\n","         [0.],\n","         [0.],\n","         [0.],\n","         [0.]]),\n"," tensor([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]),\n"," tensor([11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0])]"]},"metadata":{},"execution_count":181}]},{"cell_type":"code","source":["# VQA Model Details\n","\n","word_emb_dim = 32\n","ques_lstm_out = 256\n","num_hidden_act = 1024\n","num_rf_out = 256\n","num_bimodal_units = 256\n","q_len = 9 #question lenght\n","n1 = 51 #dictionnary lenght + 1\n","\n","image_encoder = 'dense'\n","\n","if image_encoder == 'dense':\n","    densenet_config = (6, 6, 6)\n","    densenet_dim = [128, 160, 352] # Might be nice to compute according to densenet_config\n","\n","\n","\n","# Training/Optimization\n","\n","root = '/mnt/gs/dynamic-chart-vqa-train-data'\n","optimizer = torch.optim.Adamax\n","test_interval = 5  # In epochs\n","test_every_epoch_after = 20\n","max_epochs = 15\n","overwrite_expt_dir = False  # For convenience, set to True while debugging\n","grad_clip = 50\n","\n","# Parameters for learning rate schedule\n","\n","lr = 7e-4*.7*.7*.7*.7\n","lr_decay_step = 2  # Decay every this many epochs\n","lr_decay_rate = .7\n","lr_decay_epochs = range(15, 25, lr_decay_step)\n","lr_warmup_steps = [0.5 * lr, 1.0 * lr, 1.0 * lr, 1.5 * lr, 2.0 * lr]\n","dropout_classifier = True"],"metadata":{"id":"SoTwRW8TXyhS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import argparse\n","import json\n","import os\n","import shutil\n","import sys\n","import torch\n","import torch.nn as nn\n","\n","\n","parser = argparse.ArgumentParser()\n","parser.add_argument('--evaluate', action='store_true')\n","parser.add_argument('--resume', action='store_true')\n","parser.add_argument('--expt_name', required=True, type=str)\n","parser.add_argument('--data_root', default='/mnt/gs/dynamic-chart-vqa-train-data', type=str)\n","\n","\n","args = parser.parse_args(args=['--evaluate','--expt_name','PreFil_Model_2', '--data_root', '/mnt/gs/dynamic-chart-vqa-train-data'])\n","\n","\n","\n","EXPT_DIR = os.path.join(args.data_root, 'experiments', args.expt_name)\n","\n","\n","\n","\n","\n","def inline_print(text):\n","    \"\"\"\n","    A simple helper to print text inline. Helpful for displaying training progress among other things.\n","    Args:\n","        text: Text to print inline\n","    \"\"\"\n","    sys.stdout.write('\\r' + text)\n","    sys.stdout.flush()\n","\n","\n","def fit(net, dataloader, criterion, optimizer, epoch):\n","    \"\"\"\n","    Train 1 epoch on the given dataloader and model\n","\n","    Args:\n","        net: Model instance to train\n","        dataloader: dataset to use\n","        criterion: Training objective\n","        optimizer: Optimizer to use\n","        epoch: Current Epoch\n","    \"\"\"\n","\n","    net.train()\n","    correct = 0\n","    total = 0\n","    total_loss = 0\n","    for i, q, a, ql, qid in dataloader: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the train index/question index\n","        q = q.cuda()\n","        i = i.cuda()\n","        ql = ql.cuda()\n","        a = a.cuda()\n","        p = net(i, q, ql)\n","        loss = criterion(p, a)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        nn.utils.clip_grad_norm_(net.parameters(), grad_clip)\n","        optimizer.step()\n","        p_scale = torch.sigmoid(p)\n","        pred_class = p_scale >= 0.5\n","        c = float(torch.sum(pred_class.float() == a))\n","        correct += c\n","        total += len(ql)\n","        total_loss += loss * len(ql)\n","        inline_print(\n","            f'Running {dataloader.dataset.split}, Processed {total} of {len(dataloader) * dataloader.batch_size} '\n","            f'Accuracy: {correct / total}, Loss: {total_loss / total}')\n","\n","    print(f'\\nTrain Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def predict(net, dataloaders, epoch):\n","    \"\"\"\n","    Evaluate 1 epoch on the given list of dataloaders and model, prints accuracy and saves predictions\n","\n","    Args:\n","        net: Model instance to train\n","        dataloaders: List of datasets to use\n","        epoch: Current Epoch\n","    \"\"\"\n","    net.eval()\n","    #for data in dataloaders: #dontneed this because I am not passing both a test_dataset and a validaiton_dataset (only doing validation_dataset). then uncommenting au subsequent mention of 'data' and replacing by dataloaders'\n","    correct = 0\n","    total = 0\n","    results = dict()\n","    with torch.no_grad():\n","        #for i, q, a, ql in data: #i is image tensor, q is question, a i\n","        for i, q, a, ql, qid in dataloaders: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the question index/dataste index\n","            q = q.cuda()\n","            i = i.cuda()\n","            ql = ql.cuda()\n","            a = a.cuda()\n","            p = net(i, q, ql)\n","            _, idx = p.max(dim=1)\n","            p_scale = torch.sigmoid(p)\n","            pred_class = p_scale >= 0.5 #increasing the threshold for prediction\n","            c = float(torch.sum(pred_class.float() == a))\n","            for qqid, curr_pred_class in zip(qid, pred_class):\n","              qqid = int(qqid.item())\n","              if qqid not in results:\n","                results[qqid] = int(curr_pred_class)\n","            correct += c\n","            total += len(ql)\n","            #print_str = f'Running {data.dataset.split}, Processed {total} of {len(data) * data.batch_size} '\n","            print_str = f'Running {dataloaders.dataset.split}, Processed {total} of {len(dataloaders) * dataloaders.batch_size} '\n","            #if 'test' not in data.dataset.split:\n","            if 'test' not in dataloaders.dataset.split:\n","                inline_print(print_str + f'Accuracy: {correct / total}')\n","            else:\n","                inline_print(print_str)\n","\n","    #result_file = os.path.join(EXPT_DIR, f'results_{data.dataset.split}_{epoch + 1}.json')\n","    result_file = os.path.join(EXPT_DIR, f'results_{dataloaders.dataset.split}_{epoch + 1}.json')\n","    json.dump(results, open(result_file, 'w'))\n","    print(f\"Saved {result_file}\")\n","    #if 'test' not in data.dataset.split:\n","    if 'test' not in dataloaders.dataset.split:\n","        #print(f'\\n{data.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","        print(f'\\n{dataloaders.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def make_experiment_directory():\n","    #if not args.evaluate and not args.resume and not overwrite_expt_dir:\n","    if not args.evaluate and not args.resume:\n","        if os.path.exists(EXPT_DIR):\n","            raise RuntimeError(f'Experiment directory {EXPT_DIR} already exists, '\n","                               f'and the config is set to do not overwrite')\n","\n","    if not os.path.exists(EXPT_DIR):\n","        os.makedirs(EXPT_DIR)\n","\n","\n","def update_learning_rate(epoch, optimizer):\n","    if epoch < len(lr_warmup_steps):\n","        optimizer.param_groups[0]['lr'] = lr_warmup_steps[epoch]\n","    elif epoch in lr_decay_epochs:\n","        optimizer.param_groups[0]['lr'] *= lr_decay_rate\n","\n","\n","def training_loop(net, train_loader, val_loaders,optimizer, criterion, start_epoch=0):\n","    for epoch in range(start_epoch, max_epochs):\n","        update_learning_rate(epoch, optimizer)\n","        fit(net, train_loader, criterion, optimizer, epoch)\n","        curr_epoch_path = os.path.join(EXPT_DIR, str(epoch + 1) + '.pth')\n","        latest_path = os.path.join(EXPT_DIR, 'latest.pth')\n","        data = {'model_state_dict': net.state_dict(),\n","                'optim_state_dict': optimizer.state_dict(),\n","                'epoch': epoch,\n","                'lr': optimizer.param_groups[0]['lr']}\n","        torch.save(data, curr_epoch_path)\n","        torch.save(data, latest_path)\n","\n","        if epoch % test_interval == 0 or epoch >= test_every_epoch_after:\n","            predict(net, val_loaders, epoch)\n","\n","\n","def evaluate_saved(net, dataloader):\n","    weights_path = os.path.join(EXPT_DIR, 'latest.pth')\n","    saved = torch.load(weights_path)\n","    net.eval()\n","    net.load_state_dict(saved['model_state_dict'])\n","    predict(net, dataloader, saved['epoch'])\n","\n","\n","# %%\n","def main():\n","    make_experiment_directory()\n","    #print('Building Dataloaders according to configuration')\n","\n","    if args.evaluate or args.resume:\n","    #    lut_location = os.path.join(EXPT_DIR, 'LUT.json')\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","    else:\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","\n","    print('Building model to train: ')\n","    net = PReFIL(n1, 1)\n","\n","    print(\"Model Overview: \")\n","    print(net)\n","    net.cuda()\n","    start_epoch = 0\n","    if not args.evaluate:\n","        print('Training...')\n","        #optimizer = optimizer(net.parameters(), lr=lr)\n","        optimizer = torch.optim.Adamax(net.parameters(), lr=7e-4)\n","        criterion = torch.nn.CrossEntropyLoss()\n","        criterion = nn.BCEWithLogitsLoss()\n","\n","        if args.resume:\n","            resumed_data = torch.load(os.path.join(EXPT_DIR, 'latest.pth'))\n","            print(f\"Resuming from epoch {resumed_data['epoch'] + 1}\")\n","            net.load_state_dict(resumed_data['model_state_dict'])\n","            #optimizer = optimizer(net.parameters(), lr=resumed_data['lr'])\n","            optimizer = torch.optim.Adamax(net.parameters(), lr=resumed_data['lr'])\n","            optimizer.load_state_dict(resumed_data['optim_state_dict'])\n","            start_epoch = resumed_data['epoch']\n","        training_loop(net,\n","                      train_data,\n","                      val_data,\n","                      optimizer, criterion, start_epoch)\n","\n","    else:\n","        print('Evaluating...')\n","        #evaluate_saved(net, val_data)\n","        evaluate_saved(net, test_data)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DxRb1B_0nNeS","executionInfo":{"status":"ok","timestamp":1700370015674,"user_tz":480,"elapsed":5136,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"3676ed62-34b9-40a5-dae8-f176e9c8e066"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Building model to train: \n","Model Overview: \n","PReFIL(\n","  (rnn): QuestionEncoder(\n","    (embedding): Embedding(51, 32)\n","    (lstm): LSTM(32, 256)\n","  )\n","  (cnn): DenseNetEncoder(\n","    (densenet): DenseNet(\n","      (first_conv): Sequential(\n","        (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","        (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu0): ReLU(inplace=True)\n","        (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","      )\n","      (final_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (denseblock): ModuleList(\n","        (0): Sequential(\n","          (dblock0): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition1): _Transition(\n","            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (1): Sequential(\n","          (dblock1): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition2): _Transition(\n","            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (2): Sequential(\n","          (dblock2): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","        )\n","      )\n","    )\n","  )\n","  (bimodal_low): BimodalEmbedding(\n","    (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (bimodal_high): BimodalEmbedding(\n","    (bn): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (maxpool_low): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (rf_low): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (rf_high): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (classifier): Classifier(\n","    (relu): ReLU(inplace=True)\n","    (lin1): Linear(in_features=1024, out_features=1024, bias=True)\n","    (classifier): Linear(in_features=1024, out_features=1, bias=True)\n","    (drop): Dropout(p=0.5, inplace=False)\n","  )\n",")\n","Evaluating...\n","Running test, Processed 12 of 64 Saved /mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2/results_test_10.json\n"]}]},{"cell_type":"markdown","source":["### Inspect the Prediction Results"],"metadata":{"id":"wYC8K45Db5Tf"}},{"cell_type":"code","source":["#download the predictions\n","import json\n","# Change working directory to the location of the prediction result file\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2')\n","\n","\n","with open('results_test_10.json') as f:\n","    result_test_image = (json.load(f))\n"],"metadata":{"id":"1Ymjdm0LuhJH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#the results are the question index and their predicted answer (0 or 1)\n","result_test_image"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N-Yx4HCScR4V","executionInfo":{"status":"ok","timestamp":1700370024961,"user_tz":480,"elapsed":333,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"2535813a-1eb2-4520-9a80-ce694e91b087"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'11': 1,\n"," '10': 0,\n"," '9': 0,\n"," '8': 1,\n"," '7': 0,\n"," '6': 1,\n"," '5': 1,\n"," '4': 0,\n"," '3': 1,\n"," '2': 0,\n"," '1': 0,\n"," '0': 1}"]},"metadata":{},"execution_count":184}]},{"cell_type":"code","source":["#we cn convert those quesiton index back to actual question by building a dictionnary of the question index and original questions that were previsouly generated\n","dict_decode_questions = {quest_index[i]: original_questions[i] for i in range(len(quest_index))}\n","\n","#then we replace the question index in the results by the original question from this decoder dictionnary\n","final_result = list((dict_decode_questions[int(idx)],value) for (idx,value) in result_test_image.items())\n","\n","#convert to dataframe and inspect\n","final_result\n","df_test = pd.DataFrame(final_result, columns=['question','predicted_answer'])\n","df_test.index = df_test.index.astype(int) #convert index to integer (it was a string)\n","df_test.replace({0:'yes', 1:'no'},inplace=True) #replace 0 by 1 and vice-versa because we inverted them before passing them into the VQA  model\n","df_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"id":"TSzUbqwMk3sJ","executionInfo":{"status":"ok","timestamp":1700370027802,"user_tz":480,"elapsed":786,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"7609c0b1-4de6-4bc1-f299-252a4832f39b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                            question predicted_answer\n","0      [is, dark_turquoise, less, than, light_slate]               no\n","1   [is, dark_turquoise, greater, than, light_slate]              yes\n","2      [is, light_slate, less, than, dark_turquoise]              yes\n","3   [is, light_slate, greater, than, dark_turquoise]               no\n","4            [is, dark_turquoise, the, high, median]              yes\n","5             [is, dark_turquoise, the, low, median]               no\n","6                 [is, dark_turquoise, the, minimum]               no\n","7                 [is, dark_turquoise, the, maximum]              yes\n","8               [is, light_slate, the, high, median]               no\n","9                [is, light_slate, the, low, median]              yes\n","10                   [is, light_slate, the, minimum]              yes\n","11                   [is, light_slate, the, maximum]               no"],"text/html":["\n","  <div id=\"df-ae2f9e83-cb07-4e5b-bdff-1b5d3f17c740\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question</th>\n","      <th>predicted_answer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[is, dark_turquoise, less, than, light_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[is, dark_turquoise, greater, than, light_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[is, light_slate, less, than, dark_turquoise]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[is, light_slate, greater, than, dark_turquoise]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[is, dark_turquoise, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>[is, dark_turquoise, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>[is, dark_turquoise, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>[is, dark_turquoise, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>[is, light_slate, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>[is, light_slate, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>[is, light_slate, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>[is, light_slate, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae2f9e83-cb07-4e5b-bdff-1b5d3f17c740')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ae2f9e83-cb07-4e5b-bdff-1b5d3f17c740 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ae2f9e83-cb07-4e5b-bdff-1b5d3f17c740');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d4b8f468-c235-47d3-9846-f6948b44085d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4b8f468-c235-47d3-9846-f6948b44085d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d4b8f468-c235-47d3-9846-f6948b44085d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1ab0e921-e164-4ecf-9fc6-a517b7632927\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1ab0e921-e164-4ecf-9fc6-a517b7632927 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":185}]},{"cell_type":"code","source":[],"metadata":{"id":"4taHpz6A9jYp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Apply to a test image - Intermediary vertical Bar Chart Example"],"metadata":{"id":"tHaw1OWaTkCh"}},{"cell_type":"markdown","source":["### Parameters to tweak"],"metadata":{"id":"O7Bvc8PsTkCp"}},{"cell_type":"code","source":["##############################################\n","#######   PARAMETERS TO TWEAK   ##############\n","##############################################\n","\n","#load global dictionnary that was trained on training dataset (build in part 1)\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","with open('global_dictionnary.txt','r') as f:\n","  text = f.read()\n","  global_dictionnary = eval(text)\n","#alternatively, uncomment the below line\n","#global_dictionnary = {'is': 30, 'the': 31, 'minimum': 32, 'maximum': 33, 'greater': 34, 'than': 35, 'less': 36, 'high': 37, 'median': 38, 'low': 39, 'does': 40, 'have': 41, 'area': 42, 'under': 43, 'curve': 44, 'smoothest': 45, 'roughest': 46, 'lowest': 47, 'value': 48, 'highest': 49, 'intersect': 50}\n","\n","\n","# Enter working directory where image to predict is\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/test')\n","#os.chdir('/content/gdrive/MyDrive/NorthWestern University/Course/AI Capstone/Data/datasets/train1/png')\n","\n","# Enter Image name\n","img_name = \"764.png\"\n","\n","#specify lenght for padding (based on trainign dataset from part 1 as well)\n","padding_length = 9\n","\n","#specifcy the distance at which nearby labels in the images hsoud be merged during OCR extraction (ex: merging the words 'organic' and 'search' as a single token 'organic_search')\n","dist_limit=4\n","\n","#change the chart type decoder here if needed (make sure the chart types are in the same order as their encoding in the model)\n","chart_type_decoding_values = ['dot_line','hbar_categorical', 'line','pie','vbar_categorical']"],"metadata":{"id":"KDNm3lcaTkCp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Run the below cells as is"],"metadata":{"id":"5E9c_NOpTkCq"}},{"cell_type":"code","source":["#run as is\n","result = generating_questions(img_name,global_dictionnary,padding_length,dist_limit)\n","\n","#can isolate each output from the function as follows:\n","original_questions = result[0]\n","encoded_questions = result[1]\n","img_name_array = result[2]\n","quest_index = result[3]\n","encoded_answers = torch.zeros((1,)) # WE DO NOT HAVE ANSWERS FOR TEST IMAGES, so passing an empty tensor\n","\n","print(original_questions)\n","print(encoded_questions)\n","print(img_name_array)\n","\n","#The tensor batched training Dataset object is created\n","test_preprocess_input = ImageDataset(img_name_array,encoded_questions,encoded_answers,quest_index,'test') #Preprocessing function is applied to the dataset\n","test_preprocess_input = DataLoader(test_preprocess_input,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700376035709,"user_tz":480,"elapsed":1009,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"463a0fcf-b015-4eab-b65e-2695310e01b3","id":"D_USskbKTkCq"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 249ms/step\n","this graph is a  vbar_categorical chart\n","this chart contains the labels ['yoqey_sxe', 'olive', 'cornflower', 'orange_red']\n","[['is', 'yoqey_sxe', 'the', 'maximum'], ['is', 'yoqey_sxe', 'the', 'minimum'], ['is', 'yoqey_sxe', 'the', 'low', 'median'], ['is', 'yoqey_sxe', 'the', 'high', 'median'], ['is', 'olive', 'the', 'maximum'], ['is', 'olive', 'the', 'minimum'], ['is', 'olive', 'the', 'low', 'median'], ['is', 'olive', 'the', 'high', 'median'], ['is', 'cornflower', 'the', 'maximum'], ['is', 'cornflower', 'the', 'minimum'], ['is', 'cornflower', 'the', 'low', 'median'], ['is', 'cornflower', 'the', 'high', 'median'], ['is', 'orange_red', 'the', 'maximum'], ['is', 'orange_red', 'the', 'minimum'], ['is', 'orange_red', 'the', 'low', 'median'], ['is', 'orange_red', 'the', 'high', 'median'], ['is', 'yoqey_sxe', 'greater', 'than', 'olive'], ['is', 'yoqey_sxe', 'less', 'than', 'olive'], ['is', 'yoqey_sxe', 'greater', 'than', 'cornflower'], ['is', 'yoqey_sxe', 'less', 'than', 'cornflower'], ['is', 'yoqey_sxe', 'greater', 'than', 'orange_red'], ['is', 'yoqey_sxe', 'less', 'than', 'orange_red'], ['is', 'olive', 'greater', 'than', 'yoqey_sxe'], ['is', 'olive', 'less', 'than', 'yoqey_sxe'], ['is', 'olive', 'greater', 'than', 'cornflower'], ['is', 'olive', 'less', 'than', 'cornflower'], ['is', 'olive', 'greater', 'than', 'orange_red'], ['is', 'olive', 'less', 'than', 'orange_red'], ['is', 'cornflower', 'greater', 'than', 'yoqey_sxe'], ['is', 'cornflower', 'less', 'than', 'yoqey_sxe'], ['is', 'cornflower', 'greater', 'than', 'olive'], ['is', 'cornflower', 'less', 'than', 'olive'], ['is', 'cornflower', 'greater', 'than', 'orange_red'], ['is', 'cornflower', 'less', 'than', 'orange_red'], ['is', 'orange_red', 'greater', 'than', 'yoqey_sxe'], ['is', 'orange_red', 'less', 'than', 'yoqey_sxe'], ['is', 'orange_red', 'greater', 'than', 'olive'], ['is', 'orange_red', 'less', 'than', 'olive'], ['is', 'orange_red', 'greater', 'than', 'cornflower'], ['is', 'orange_red', 'less', 'than', 'cornflower']]\n","[[30  1 31 33  0  0  0  0  0]\n"," [30  1 31 32  0  0  0  0  0]\n"," [30  1 31 39 38  0  0  0  0]\n"," [30  1 31 37 38  0  0  0  0]\n"," [30  4 31 33  0  0  0  0  0]\n"," [30  4 31 32  0  0  0  0  0]\n"," [30  4 31 39 38  0  0  0  0]\n"," [30  4 31 37 38  0  0  0  0]\n"," [30  3 31 33  0  0  0  0  0]\n"," [30  3 31 32  0  0  0  0  0]\n"," [30  3 31 39 38  0  0  0  0]\n"," [30  3 31 37 38  0  0  0  0]\n"," [30  2 31 33  0  0  0  0  0]\n"," [30  2 31 32  0  0  0  0  0]\n"," [30  2 31 39 38  0  0  0  0]\n"," [30  2 31 37 38  0  0  0  0]\n"," [30  1 34 35  4  0  0  0  0]\n"," [30  1 36 35  4  0  0  0  0]\n"," [30  1 34 35  3  0  0  0  0]\n"," [30  1 36 35  3  0  0  0  0]\n"," [30  1 34 35  2  0  0  0  0]\n"," [30  1 36 35  2  0  0  0  0]\n"," [30  4 34 35  1  0  0  0  0]\n"," [30  4 36 35  1  0  0  0  0]\n"," [30  4 34 35  3  0  0  0  0]\n"," [30  4 36 35  3  0  0  0  0]\n"," [30  4 34 35  2  0  0  0  0]\n"," [30  4 36 35  2  0  0  0  0]\n"," [30  3 34 35  1  0  0  0  0]\n"," [30  3 36 35  1  0  0  0  0]\n"," [30  3 34 35  4  0  0  0  0]\n"," [30  3 36 35  4  0  0  0  0]\n"," [30  3 34 35  2  0  0  0  0]\n"," [30  3 36 35  2  0  0  0  0]\n"," [30  2 34 35  1  0  0  0  0]\n"," [30  2 36 35  1  0  0  0  0]\n"," [30  2 34 35  4  0  0  0  0]\n"," [30  2 36 35  4  0  0  0  0]\n"," [30  2 34 35  3  0  0  0  0]\n"," [30  2 36 35  3  0  0  0  0]]\n","['764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png', '764.png']\n"]}]},{"cell_type":"code","source":["#display the image\n","img = load_img(img_name)\n","plt.imshow(img)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":486},"executionInfo":{"status":"ok","timestamp":1700376072771,"user_tz":480,"elapsed":566,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"31afaaf1-7317-403e-98c5-adce484c373c","id":"32QeMDTXTkCq"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# VQA Model Details\n","\n","word_emb_dim = 32\n","ques_lstm_out = 256\n","num_hidden_act = 1024\n","num_rf_out = 256\n","num_bimodal_units = 256\n","q_len = 9 #question lenght\n","n1 = 51 #dictionnary lenght + 1\n","\n","image_encoder = 'dense'\n","\n","if image_encoder == 'dense':\n","    densenet_config = (6, 6, 6)\n","    densenet_dim = [128, 160, 352] # Might be nice to compute according to densenet_config\n","\n","\n","\n","# Training/Optimization\n","\n","root = '/mnt/gs/dynamic-chart-vqa-train-data'\n","optimizer = torch.optim.Adamax\n","test_interval = 5  # In epochs\n","test_every_epoch_after = 20\n","max_epochs = 15\n","overwrite_expt_dir = False  # For convenience, set to True while debugging\n","grad_clip = 50\n","\n","# Parameters for learning rate schedule\n","\n","lr = 7e-4*.7*.7*.7*.7\n","lr_decay_step = 2  # Decay every this many epochs\n","lr_decay_rate = .7\n","lr_decay_epochs = range(15, 25, lr_decay_step)\n","lr_warmup_steps = [0.5 * lr, 1.0 * lr, 1.0 * lr, 1.5 * lr, 2.0 * lr]\n","dropout_classifier = True"],"metadata":{"id":"7NGofpK_TkCr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import argparse\n","import json\n","import os\n","import shutil\n","import sys\n","import torch\n","import torch.nn as nn\n","\n","\n","parser = argparse.ArgumentParser()\n","parser.add_argument('--evaluate', action='store_true')\n","parser.add_argument('--resume', action='store_true')\n","parser.add_argument('--expt_name', required=True, type=str)\n","parser.add_argument('--data_root', default='/mnt/gs/dynamic-chart-vqa-train-data', type=str)\n","\n","\n","args = parser.parse_args(args=['--evaluate','--expt_name','PreFil_Model_2', '--data_root', '/mnt/gs/dynamic-chart-vqa-train-data'])\n","\n","\n","\n","EXPT_DIR = os.path.join(args.data_root, 'experiments', args.expt_name)\n","\n","\n","\n","\n","\n","def inline_print(text):\n","    \"\"\"\n","    A simple helper to print text inline. Helpful for displaying training progress among other things.\n","    Args:\n","        text: Text to print inline\n","    \"\"\"\n","    sys.stdout.write('\\r' + text)\n","    sys.stdout.flush()\n","\n","\n","def fit(net, dataloader, criterion, optimizer, epoch):\n","    \"\"\"\n","    Train 1 epoch on the given dataloader and model\n","\n","    Args:\n","        net: Model instance to train\n","        dataloader: dataset to use\n","        criterion: Training objective\n","        optimizer: Optimizer to use\n","        epoch: Current Epoch\n","    \"\"\"\n","\n","    net.train()\n","    correct = 0\n","    total = 0\n","    total_loss = 0\n","    for i, q, a, ql, qid in dataloader: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the train index/question index\n","        q = q.cuda()\n","        i = i.cuda()\n","        ql = ql.cuda()\n","        a = a.cuda()\n","        p = net(i, q, ql)\n","        loss = criterion(p, a)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        nn.utils.clip_grad_norm_(net.parameters(), grad_clip)\n","        optimizer.step()\n","        p_scale = torch.sigmoid(p)\n","        pred_class = p_scale >= 0.5\n","        c = float(torch.sum(pred_class.float() == a))\n","        correct += c\n","        total += len(ql)\n","        total_loss += loss * len(ql)\n","        inline_print(\n","            f'Running {dataloader.dataset.split}, Processed {total} of {len(dataloader) * dataloader.batch_size} '\n","            f'Accuracy: {correct / total}, Loss: {total_loss / total}')\n","\n","    print(f'\\nTrain Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def predict(net, dataloaders, epoch):\n","    \"\"\"\n","    Evaluate 1 epoch on the given list of dataloaders and model, prints accuracy and saves predictions\n","\n","    Args:\n","        net: Model instance to train\n","        dataloaders: List of datasets to use\n","        epoch: Current Epoch\n","    \"\"\"\n","    net.eval()\n","    #for data in dataloaders: #dontneed this because I am not passing both a test_dataset and a validaiton_dataset (only doing validation_dataset). then uncommenting au subsequent mention of 'data' and replacing by dataloaders'\n","    correct = 0\n","    total = 0\n","    results = dict()\n","    with torch.no_grad():\n","        #for i, q, a, ql in data: #i is image tensor, q is question, a i\n","        for i, q, a, ql, qid in dataloaders: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the question index/dataste index\n","            q = q.cuda()\n","            i = i.cuda()\n","            ql = ql.cuda()\n","            a = a.cuda()\n","            p = net(i, q, ql)\n","            _, idx = p.max(dim=1)\n","            p_scale = torch.sigmoid(p)\n","            pred_class = p_scale >= 0.5 #increasing the threshold for prediction\n","            c = float(torch.sum(pred_class.float() == a))\n","            for qqid, curr_pred_class in zip(qid, pred_class):\n","              qqid = int(qqid.item())\n","              if qqid not in results:\n","                results[qqid] = int(curr_pred_class)\n","            correct += c\n","            total += len(ql)\n","            #print_str = f'Running {data.dataset.split}, Processed {total} of {len(data) * data.batch_size} '\n","            print_str = f'Running {dataloaders.dataset.split}, Processed {total} of {len(dataloaders) * dataloaders.batch_size} '\n","            #if 'test' not in data.dataset.split:\n","            if 'test' not in dataloaders.dataset.split:\n","                inline_print(print_str + f'Accuracy: {correct / total}')\n","            else:\n","                inline_print(print_str)\n","\n","    #result_file = os.path.join(EXPT_DIR, f'results_{data.dataset.split}_{epoch + 1}.json')\n","    result_file = os.path.join(EXPT_DIR, f'results_{dataloaders.dataset.split}_{epoch + 1}.json')\n","    json.dump(results, open(result_file, 'w'))\n","    print(f\"Saved {result_file}\")\n","    #if 'test' not in data.dataset.split:\n","    if 'test' not in dataloaders.dataset.split:\n","        #print(f'\\n{data.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","        print(f'\\n{dataloaders.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def make_experiment_directory():\n","    #if not args.evaluate and not args.resume and not overwrite_expt_dir:\n","    if not args.evaluate and not args.resume:\n","        if os.path.exists(EXPT_DIR):\n","            raise RuntimeError(f'Experiment directory {EXPT_DIR} already exists, '\n","                               f'and the config is set to do not overwrite')\n","\n","    if not os.path.exists(EXPT_DIR):\n","        os.makedirs(EXPT_DIR)\n","\n","\n","def update_learning_rate(epoch, optimizer):\n","    if epoch < len(lr_warmup_steps):\n","        optimizer.param_groups[0]['lr'] = lr_warmup_steps[epoch]\n","    elif epoch in lr_decay_epochs:\n","        optimizer.param_groups[0]['lr'] *= lr_decay_rate\n","\n","\n","def training_loop(net, train_loader, val_loaders,optimizer, criterion, start_epoch=0):\n","    for epoch in range(start_epoch, max_epochs):\n","        update_learning_rate(epoch, optimizer)\n","        fit(net, train_loader, criterion, optimizer, epoch)\n","        curr_epoch_path = os.path.join(EXPT_DIR, str(epoch + 1) + '.pth')\n","        latest_path = os.path.join(EXPT_DIR, 'latest.pth')\n","        data = {'model_state_dict': net.state_dict(),\n","                'optim_state_dict': optimizer.state_dict(),\n","                'epoch': epoch,\n","                'lr': optimizer.param_groups[0]['lr']}\n","        torch.save(data, curr_epoch_path)\n","        torch.save(data, latest_path)\n","\n","        if epoch % test_interval == 0 or epoch >= test_every_epoch_after:\n","            predict(net, val_loaders, epoch)\n","\n","\n","def evaluate_saved(net, dataloader):\n","    weights_path = os.path.join(EXPT_DIR, 'latest.pth')\n","    saved = torch.load(weights_path)\n","    net.eval()\n","    net.load_state_dict(saved['model_state_dict'])\n","    predict(net, dataloader, saved['epoch'])\n","\n","\n","# %%\n","def main():\n","    make_experiment_directory()\n","    #print('Building Dataloaders according to configuration')\n","\n","    if args.evaluate or args.resume:\n","    #    lut_location = os.path.join(EXPT_DIR, 'LUT.json')\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","    else:\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","\n","    print('Building model to train: ')\n","    net = PReFIL(n1, 1)\n","\n","    print(\"Model Overview: \")\n","    print(net)\n","    net.cuda()\n","    start_epoch = 0\n","    if not args.evaluate:\n","        print('Training...')\n","        #optimizer = optimizer(net.parameters(), lr=lr)\n","        optimizer = torch.optim.Adamax(net.parameters(), lr=7e-4)\n","        criterion = torch.nn.CrossEntropyLoss()\n","        criterion = nn.BCEWithLogitsLoss()\n","\n","        if args.resume:\n","            resumed_data = torch.load(os.path.join(EXPT_DIR, 'latest.pth'))\n","            print(f\"Resuming from epoch {resumed_data['epoch'] + 1}\")\n","            net.load_state_dict(resumed_data['model_state_dict'])\n","            #optimizer = optimizer(net.parameters(), lr=resumed_data['lr'])\n","            optimizer = torch.optim.Adamax(net.parameters(), lr=resumed_data['lr'])\n","            optimizer.load_state_dict(resumed_data['optim_state_dict'])\n","            start_epoch = resumed_data['epoch']\n","        training_loop(net,\n","                      train_data,\n","                      val_data,\n","                      optimizer, criterion, start_epoch)\n","\n","    else:\n","        print('Evaluating...')\n","        #evaluate_saved(net, val_data)\n","        evaluate_saved(net, test_data)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700376080274,"user_tz":480,"elapsed":1929,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"d991e9a4-24cd-419c-852d-253ecddcc84c","id":"AI_0CSC8TkCr"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Building model to train: \n","Model Overview: \n","PReFIL(\n","  (rnn): QuestionEncoder(\n","    (embedding): Embedding(51, 32)\n","    (lstm): LSTM(32, 256)\n","  )\n","  (cnn): DenseNetEncoder(\n","    (densenet): DenseNet(\n","      (first_conv): Sequential(\n","        (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","        (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu0): ReLU(inplace=True)\n","        (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","      )\n","      (final_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (denseblock): ModuleList(\n","        (0): Sequential(\n","          (dblock0): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition1): _Transition(\n","            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (1): Sequential(\n","          (dblock1): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition2): _Transition(\n","            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (2): Sequential(\n","          (dblock2): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","        )\n","      )\n","    )\n","  )\n","  (bimodal_low): BimodalEmbedding(\n","    (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (bimodal_high): BimodalEmbedding(\n","    (bn): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (maxpool_low): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (rf_low): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (rf_high): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (classifier): Classifier(\n","    (relu): ReLU(inplace=True)\n","    (lin1): Linear(in_features=1024, out_features=1024, bias=True)\n","    (classifier): Linear(in_features=1024, out_features=1, bias=True)\n","    (drop): Dropout(p=0.5, inplace=False)\n","  )\n",")\n","Evaluating...\n","Running test, Processed 40 of 64 Saved /mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2/results_test_10.json\n"]}]},{"cell_type":"markdown","source":["### Inspect the Prediction Results"],"metadata":{"id":"mTI4TAVSTkCs"}},{"cell_type":"code","source":["#download the predictions\n","import json\n","# Change working directory to the location of the prediction result file\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2')\n","\n","\n","with open('results_test_10.json') as f:\n","    result_test_image = (json.load(f))\n"],"metadata":{"id":"b3SOU2A1TkCs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#we cn convert those quesiton index back to actual question by building a dictionnary of the question index and original questions that were previsouly generated\n","dict_decode_questions = {quest_index[i]: original_questions[i] for i in range(len(quest_index))}\n","\n","#then we replace the question index in the results by the original question from this decoder dictionnary\n","final_result = list((dict_decode_questions[int(idx)],value) for (idx,value) in result_test_image.items())\n","\n","#convert to dataframe and inspect\n","final_result\n","df_test = pd.DataFrame(final_result, columns=['question','predicted_answer'])\n","df_test.index = df_test.index.astype(int) #convert index to integer (it was a string)\n","df_test.replace({0:'yes', 1:'no'},inplace=True) #replace 0 by 1 and vice-versa because we inverted them before passing them into the VQA  model\n","df_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1700376086647,"user_tz":480,"elapsed":179,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"a4521386-0f01-4357-cf34-adbc4777d7d5","id":"Vu5omDGWTkCt"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                       question predicted_answer\n","0      [is, orange_red, less, than, cornflower]               no\n","1   [is, orange_red, greater, than, cornflower]              yes\n","2           [is, orange_red, less, than, olive]               no\n","3        [is, orange_red, greater, than, olive]              yes\n","4       [is, orange_red, less, than, yoqey_sxe]               no\n","5    [is, orange_red, greater, than, yoqey_sxe]              yes\n","6      [is, cornflower, less, than, orange_red]              yes\n","7   [is, cornflower, greater, than, orange_red]               no\n","8           [is, cornflower, less, than, olive]              yes\n","9        [is, cornflower, greater, than, olive]               no\n","10      [is, cornflower, less, than, yoqey_sxe]               no\n","11   [is, cornflower, greater, than, yoqey_sxe]               no\n","12          [is, olive, less, than, orange_red]               no\n","13       [is, olive, greater, than, orange_red]              yes\n","14          [is, olive, less, than, cornflower]               no\n","15       [is, olive, greater, than, cornflower]               no\n","16           [is, olive, less, than, yoqey_sxe]               no\n","17        [is, olive, greater, than, yoqey_sxe]              yes\n","18      [is, yoqey_sxe, less, than, orange_red]              yes\n","19   [is, yoqey_sxe, greater, than, orange_red]               no\n","20      [is, yoqey_sxe, less, than, cornflower]               no\n","21   [is, yoqey_sxe, greater, than, cornflower]               no\n","22           [is, yoqey_sxe, less, than, olive]              yes\n","23        [is, yoqey_sxe, greater, than, olive]              yes\n","24          [is, orange_red, the, high, median]               no\n","25           [is, orange_red, the, low, median]               no\n","26               [is, orange_red, the, minimum]               no\n","27               [is, orange_red, the, maximum]              yes\n","28          [is, cornflower, the, high, median]               no\n","29           [is, cornflower, the, low, median]               no\n","30               [is, cornflower, the, minimum]              yes\n","31               [is, cornflower, the, maximum]               no\n","32               [is, olive, the, high, median]              yes\n","33                [is, olive, the, low, median]              yes\n","34                    [is, olive, the, minimum]              yes\n","35                    [is, olive, the, maximum]              yes\n","36           [is, yoqey_sxe, the, high, median]              yes\n","37            [is, yoqey_sxe, the, low, median]              yes\n","38                [is, yoqey_sxe, the, minimum]              yes\n","39                [is, yoqey_sxe, the, maximum]              yes"],"text/html":["\n","  <div id=\"df-10657c4c-67d0-4502-86de-004ef6a56294\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question</th>\n","      <th>predicted_answer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[is, orange_red, less, than, cornflower]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[is, orange_red, greater, than, cornflower]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[is, orange_red, less, than, olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[is, orange_red, greater, than, olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[is, orange_red, less, than, yoqey_sxe]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>[is, orange_red, greater, than, yoqey_sxe]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>[is, cornflower, less, than, orange_red]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>[is, cornflower, greater, than, orange_red]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>[is, cornflower, less, than, olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>[is, cornflower, greater, than, olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>[is, cornflower, less, than, yoqey_sxe]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>[is, cornflower, greater, than, yoqey_sxe]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>[is, olive, less, than, orange_red]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>[is, olive, greater, than, orange_red]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>[is, olive, less, than, cornflower]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>[is, olive, greater, than, cornflower]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>[is, olive, less, than, yoqey_sxe]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>[is, olive, greater, than, yoqey_sxe]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>[is, yoqey_sxe, less, than, orange_red]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>[is, yoqey_sxe, greater, than, orange_red]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>[is, yoqey_sxe, less, than, cornflower]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>[is, yoqey_sxe, greater, than, cornflower]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>[is, yoqey_sxe, less, than, olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>[is, yoqey_sxe, greater, than, olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>[is, orange_red, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>[is, orange_red, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>[is, orange_red, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>[is, orange_red, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>[is, cornflower, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>[is, cornflower, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>[is, cornflower, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>[is, cornflower, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>[is, olive, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>[is, olive, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>[is, olive, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>[is, olive, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>[is, yoqey_sxe, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>[is, yoqey_sxe, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>[is, yoqey_sxe, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>[is, yoqey_sxe, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10657c4c-67d0-4502-86de-004ef6a56294')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-10657c4c-67d0-4502-86de-004ef6a56294 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-10657c4c-67d0-4502-86de-004ef6a56294');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d63c774f-bcb5-42d8-9d4d-69e0236ef784\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d63c774f-bcb5-42d8-9d4d-69e0236ef784')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d63c774f-bcb5-42d8-9d4d-69e0236ef784 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_cf18b1ec-661c-4c08-84c9-c5fd71bcfcb0\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cf18b1ec-661c-4c08-84c9-c5fd71bcfcb0 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":93}]},{"cell_type":"markdown","source":["# Apply to a test image - Simple Horizontal bar Chart Example"],"metadata":{"id":"lbAKYWV59jmb"}},{"cell_type":"markdown","source":["### Parameters to tweak"],"metadata":{"id":"qoCpDfSc9jmc"}},{"cell_type":"code","source":["##############################################\n","#######   PARAMETERS TO TWEAK   ##############\n","##############################################\n","\n","#load global dictionnary that was trained on training dataset (build in part 1)\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","with open('global_dictionnary.txt','r') as f:\n","  text = f.read()\n","  global_dictionnary = eval(text)\n","#alternatively, uncomment the below line\n","#global_dictionnary = {'is': 30, 'the': 31, 'minimum': 32, 'maximum': 33, 'greater': 34, 'than': 35, 'less': 36, 'high': 37, 'median': 38, 'low': 39, 'does': 40, 'have': 41, 'area': 42, 'under': 43, 'curve': 44, 'smoothest': 45, 'roughest': 46, 'lowest': 47, 'value': 48, 'highest': 49, 'intersect': 50}\n","\n","\n","# Enter working directory where image to predict is\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/test')\n","#os.chdir('/content/gdrive/MyDrive/NorthWestern University/Course/AI Capstone/Data/datasets/train1/png')\n","\n","# Enter Image name\n","img_name = \"84.png\"\n","\n","#specify lenght for padding (based on trainign dataset from part 1 as well)\n","padding_length = 9\n","\n","#specifcy the distance at which nearby labels in the images hsoud be merged during OCR extraction (ex: merging the words 'organic' and 'search' as a single token 'organic_search')\n","dist_limit=4\n","\n","#change the chart type decoder here if needed (make sure the chart types are in the same order as their encoding in the model)\n","chart_type_decoding_values = ['dot_line','hbar_categorical', 'line','pie','vbar_categorical']"],"metadata":{"id":"L2N1aeV69jmc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Run the below cells as is"],"metadata":{"id":"HVtuflFl9jmc"}},{"cell_type":"code","source":["#run as is\n","result = generating_questions(img_name,global_dictionnary,padding_length,dist_limit)\n","\n","#can isolate each output from the function as follows:\n","original_questions = result[0]\n","encoded_questions = result[1]\n","img_name_array = result[2]\n","quest_index = result[3]\n","encoded_answers = torch.zeros((1,)) # WE DO NOT HAVE ANSWERS FOR TEST IMAGES, so passing an empty tensor\n","\n","print(original_questions)\n","print(encoded_questions)\n","print(img_name_array)\n","\n","#The tensor batched training Dataset object is created\n","test_preprocess_input = ImageDataset(img_name_array,encoded_questions,encoded_answers,quest_index,'test') #Preprocessing function is applied to the dataset\n","test_preprocess_input = DataLoader(test_preprocess_input,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700373829452,"user_tz":480,"elapsed":1060,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"cb8a59a2-f265-4990-9edc-e39e98c37bb5","id":"XnNQRzrM9jmd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 303ms/step\n","this graph is a  hbar_categorical chart\n","this chart contains the labels ['rosy_brown', 'web_gray']\n","[['is', 'rosy_brown', 'the', 'maximum'], ['is', 'rosy_brown', 'the', 'minimum'], ['is', 'rosy_brown', 'the', 'low', 'median'], ['is', 'rosy_brown', 'the', 'high', 'median'], ['is', 'web_gray', 'the', 'maximum'], ['is', 'web_gray', 'the', 'minimum'], ['is', 'web_gray', 'the', 'low', 'median'], ['is', 'web_gray', 'the', 'high', 'median'], ['is', 'rosy_brown', 'greater', 'than', 'web_gray'], ['is', 'rosy_brown', 'less', 'than', 'web_gray'], ['is', 'web_gray', 'greater', 'than', 'rosy_brown'], ['is', 'web_gray', 'less', 'than', 'rosy_brown']]\n","[[30  1 31 33  0  0  0  0  0]\n"," [30  1 31 32  0  0  0  0  0]\n"," [30  1 31 39 38  0  0  0  0]\n"," [30  1 31 37 38  0  0  0  0]\n"," [30  2 31 33  0  0  0  0  0]\n"," [30  2 31 32  0  0  0  0  0]\n"," [30  2 31 39 38  0  0  0  0]\n"," [30  2 31 37 38  0  0  0  0]\n"," [30  1 34 35  2  0  0  0  0]\n"," [30  1 36 35  2  0  0  0  0]\n"," [30  2 34 35  1  0  0  0  0]\n"," [30  2 36 35  1  0  0  0  0]]\n","['84.png', '84.png', '84.png', '84.png', '84.png', '84.png', '84.png', '84.png', '84.png', '84.png', '84.png', '84.png']\n"]}]},{"cell_type":"code","source":["#display the image\n","img = load_img(img_name)\n","plt.imshow(img)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":385},"id":"lBrXGr5fLUgP","executionInfo":{"status":"ok","timestamp":1700373831531,"user_tz":480,"elapsed":431,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"faa27e05-cffe-4974-a1a9-64b7c180add8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# VQA Model Details\n","\n","word_emb_dim = 32\n","ques_lstm_out = 256\n","num_hidden_act = 1024\n","num_rf_out = 256\n","num_bimodal_units = 256\n","q_len = 9 #question lenght\n","n1 = 51 #dictionnary lenght + 1\n","\n","image_encoder = 'dense'\n","\n","if image_encoder == 'dense':\n","    densenet_config = (6, 6, 6)\n","    densenet_dim = [128, 160, 352] # Might be nice to compute according to densenet_config\n","\n","\n","\n","# Training/Optimization\n","\n","root = '/mnt/gs/dynamic-chart-vqa-train-data'\n","optimizer = torch.optim.Adamax\n","test_interval = 5  # In epochs\n","test_every_epoch_after = 20\n","max_epochs = 15\n","overwrite_expt_dir = False  # For convenience, set to True while debugging\n","grad_clip = 50\n","\n","# Parameters for learning rate schedule\n","\n","lr = 7e-4*.7*.7*.7*.7\n","lr_decay_step = 2  # Decay every this many epochs\n","lr_decay_rate = .7\n","lr_decay_epochs = range(15, 25, lr_decay_step)\n","lr_warmup_steps = [0.5 * lr, 1.0 * lr, 1.0 * lr, 1.5 * lr, 2.0 * lr]\n","dropout_classifier = True"],"metadata":{"id":"j2GaFJJv9jme"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import argparse\n","import json\n","import os\n","import shutil\n","import sys\n","import torch\n","import torch.nn as nn\n","\n","\n","parser = argparse.ArgumentParser()\n","parser.add_argument('--evaluate', action='store_true')\n","parser.add_argument('--resume', action='store_true')\n","parser.add_argument('--expt_name', required=True, type=str)\n","parser.add_argument('--data_root', default='/mnt/gs/dynamic-chart-vqa-train-data', type=str)\n","\n","\n","args = parser.parse_args(args=['--evaluate','--expt_name','PreFil_Model_2', '--data_root', '/mnt/gs/dynamic-chart-vqa-train-data'])\n","\n","\n","\n","EXPT_DIR = os.path.join(args.data_root, 'experiments', args.expt_name)\n","\n","\n","\n","\n","\n","def inline_print(text):\n","    \"\"\"\n","    A simple helper to print text inline. Helpful for displaying training progress among other things.\n","    Args:\n","        text: Text to print inline\n","    \"\"\"\n","    sys.stdout.write('\\r' + text)\n","    sys.stdout.flush()\n","\n","\n","def fit(net, dataloader, criterion, optimizer, epoch):\n","    \"\"\"\n","    Train 1 epoch on the given dataloader and model\n","\n","    Args:\n","        net: Model instance to train\n","        dataloader: dataset to use\n","        criterion: Training objective\n","        optimizer: Optimizer to use\n","        epoch: Current Epoch\n","    \"\"\"\n","\n","    net.train()\n","    correct = 0\n","    total = 0\n","    total_loss = 0\n","    for i, q, a, ql, qid in dataloader: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the train index/question index\n","        q = q.cuda()\n","        i = i.cuda()\n","        ql = ql.cuda()\n","        a = a.cuda()\n","        p = net(i, q, ql)\n","        loss = criterion(p, a)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        nn.utils.clip_grad_norm_(net.parameters(), grad_clip)\n","        optimizer.step()\n","        p_scale = torch.sigmoid(p)\n","        pred_class = p_scale >= 0.5\n","        c = float(torch.sum(pred_class.float() == a))\n","        correct += c\n","        total += len(ql)\n","        total_loss += loss * len(ql)\n","        inline_print(\n","            f'Running {dataloader.dataset.split}, Processed {total} of {len(dataloader) * dataloader.batch_size} '\n","            f'Accuracy: {correct / total}, Loss: {total_loss / total}')\n","\n","    print(f'\\nTrain Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def predict(net, dataloaders, epoch):\n","    \"\"\"\n","    Evaluate 1 epoch on the given list of dataloaders and model, prints accuracy and saves predictions\n","\n","    Args:\n","        net: Model instance to train\n","        dataloaders: List of datasets to use\n","        epoch: Current Epoch\n","    \"\"\"\n","    net.eval()\n","    #for data in dataloaders: #dontneed this because I am not passing both a test_dataset and a validaiton_dataset (only doing validation_dataset). then uncommenting au subsequent mention of 'data' and replacing by dataloaders'\n","    correct = 0\n","    total = 0\n","    results = dict()\n","    with torch.no_grad():\n","        #for i, q, a, ql in data: #i is image tensor, q is question, a i\n","        for i, q, a, ql, qid in dataloaders: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the question index/dataste index\n","            q = q.cuda()\n","            i = i.cuda()\n","            ql = ql.cuda()\n","            a = a.cuda()\n","            p = net(i, q, ql)\n","            _, idx = p.max(dim=1)\n","            p_scale = torch.sigmoid(p)\n","            pred_class = p_scale >= 0.5 #increasing the threshold for prediction\n","            c = float(torch.sum(pred_class.float() == a))\n","            for qqid, curr_pred_class in zip(qid, pred_class):\n","              qqid = int(qqid.item())\n","              if qqid not in results:\n","                results[qqid] = int(curr_pred_class)\n","            correct += c\n","            total += len(ql)\n","            #print_str = f'Running {data.dataset.split}, Processed {total} of {len(data) * data.batch_size} '\n","            print_str = f'Running {dataloaders.dataset.split}, Processed {total} of {len(dataloaders) * dataloaders.batch_size} '\n","            #if 'test' not in data.dataset.split:\n","            if 'test' not in dataloaders.dataset.split:\n","                inline_print(print_str + f'Accuracy: {correct / total}')\n","            else:\n","                inline_print(print_str)\n","\n","    #result_file = os.path.join(EXPT_DIR, f'results_{data.dataset.split}_{epoch + 1}.json')\n","    result_file = os.path.join(EXPT_DIR, f'results_{dataloaders.dataset.split}_{epoch + 1}.json')\n","    json.dump(results, open(result_file, 'w'))\n","    print(f\"Saved {result_file}\")\n","    #if 'test' not in data.dataset.split:\n","    if 'test' not in dataloaders.dataset.split:\n","        #print(f'\\n{data.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","        print(f'\\n{dataloaders.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def make_experiment_directory():\n","    #if not args.evaluate and not args.resume and not overwrite_expt_dir:\n","    if not args.evaluate and not args.resume:\n","        if os.path.exists(EXPT_DIR):\n","            raise RuntimeError(f'Experiment directory {EXPT_DIR} already exists, '\n","                               f'and the config is set to do not overwrite')\n","\n","    if not os.path.exists(EXPT_DIR):\n","        os.makedirs(EXPT_DIR)\n","\n","\n","def update_learning_rate(epoch, optimizer):\n","    if epoch < len(lr_warmup_steps):\n","        optimizer.param_groups[0]['lr'] = lr_warmup_steps[epoch]\n","    elif epoch in lr_decay_epochs:\n","        optimizer.param_groups[0]['lr'] *= lr_decay_rate\n","\n","\n","def training_loop(net, train_loader, val_loaders,optimizer, criterion, start_epoch=0):\n","    for epoch in range(start_epoch, max_epochs):\n","        update_learning_rate(epoch, optimizer)\n","        fit(net, train_loader, criterion, optimizer, epoch)\n","        curr_epoch_path = os.path.join(EXPT_DIR, str(epoch + 1) + '.pth')\n","        latest_path = os.path.join(EXPT_DIR, 'latest.pth')\n","        data = {'model_state_dict': net.state_dict(),\n","                'optim_state_dict': optimizer.state_dict(),\n","                'epoch': epoch,\n","                'lr': optimizer.param_groups[0]['lr']}\n","        torch.save(data, curr_epoch_path)\n","        torch.save(data, latest_path)\n","\n","        if epoch % test_interval == 0 or epoch >= test_every_epoch_after:\n","            predict(net, val_loaders, epoch)\n","\n","\n","def evaluate_saved(net, dataloader):\n","    weights_path = os.path.join(EXPT_DIR, 'latest.pth')\n","    saved = torch.load(weights_path)\n","    net.eval()\n","    net.load_state_dict(saved['model_state_dict'])\n","    predict(net, dataloader, saved['epoch'])\n","\n","\n","# %%\n","def main():\n","    make_experiment_directory()\n","    #print('Building Dataloaders according to configuration')\n","\n","    if args.evaluate or args.resume:\n","    #    lut_location = os.path.join(EXPT_DIR, 'LUT.json')\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","    else:\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","\n","    print('Building model to train: ')\n","    net = PReFIL(n1, 1)\n","\n","    print(\"Model Overview: \")\n","    print(net)\n","    net.cuda()\n","    start_epoch = 0\n","    if not args.evaluate:\n","        print('Training...')\n","        #optimizer = optimizer(net.parameters(), lr=lr)\n","        optimizer = torch.optim.Adamax(net.parameters(), lr=7e-4)\n","        criterion = torch.nn.CrossEntropyLoss()\n","        criterion = nn.BCEWithLogitsLoss()\n","\n","        if args.resume:\n","            resumed_data = torch.load(os.path.join(EXPT_DIR, 'latest.pth'))\n","            print(f\"Resuming from epoch {resumed_data['epoch'] + 1}\")\n","            net.load_state_dict(resumed_data['model_state_dict'])\n","            #optimizer = optimizer(net.parameters(), lr=resumed_data['lr'])\n","            optimizer = torch.optim.Adamax(net.parameters(), lr=resumed_data['lr'])\n","            optimizer.load_state_dict(resumed_data['optim_state_dict'])\n","            start_epoch = resumed_data['epoch']\n","        training_loop(net,\n","                      train_data,\n","                      val_data,\n","                      optimizer, criterion, start_epoch)\n","\n","    else:\n","        print('Evaluating...')\n","        #evaluate_saved(net, val_data)\n","        evaluate_saved(net, test_data)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700371084631,"user_tz":480,"elapsed":4045,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"8aa4f83e-0c24-44f0-dcf4-b4eb57ce17c6","id":"X2YqNynt9jme"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Building model to train: \n","Model Overview: \n","PReFIL(\n","  (rnn): QuestionEncoder(\n","    (embedding): Embedding(51, 32)\n","    (lstm): LSTM(32, 256)\n","  )\n","  (cnn): DenseNetEncoder(\n","    (densenet): DenseNet(\n","      (first_conv): Sequential(\n","        (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","        (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu0): ReLU(inplace=True)\n","        (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","      )\n","      (final_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (denseblock): ModuleList(\n","        (0): Sequential(\n","          (dblock0): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition1): _Transition(\n","            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (1): Sequential(\n","          (dblock1): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition2): _Transition(\n","            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (2): Sequential(\n","          (dblock2): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","        )\n","      )\n","    )\n","  )\n","  (bimodal_low): BimodalEmbedding(\n","    (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (bimodal_high): BimodalEmbedding(\n","    (bn): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (maxpool_low): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (rf_low): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (rf_high): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (classifier): Classifier(\n","    (relu): ReLU(inplace=True)\n","    (lin1): Linear(in_features=1024, out_features=1024, bias=True)\n","    (classifier): Linear(in_features=1024, out_features=1, bias=True)\n","    (drop): Dropout(p=0.5, inplace=False)\n","  )\n",")\n","Evaluating...\n","Running test, Processed 12 of 64 Saved /mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2/results_test_10.json\n"]}]},{"cell_type":"markdown","source":["### Inspect the Prediction Results"],"metadata":{"id":"DIIMUApl9jmf"}},{"cell_type":"code","source":["#download the predictions\n","import json\n","# Change working directory to the location of the prediction result file\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2')\n","\n","\n","with open('results_test_10.json') as f:\n","    result_test_image = (json.load(f))\n"],"metadata":{"id":"jOUxbz9Z9jmf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#the results are the question index and their predicted answer (0 or 1)\n","result_test_image"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700371090139,"user_tz":480,"elapsed":7,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"60525bf1-90b3-4388-d36b-1cb93dad1b29","id":"yEd3S16H9jmg"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'11': 1,\n"," '10': 0,\n"," '9': 0,\n"," '8': 1,\n"," '7': 0,\n"," '6': 1,\n"," '5': 1,\n"," '4': 0,\n"," '3': 1,\n"," '2': 0,\n"," '1': 0,\n"," '0': 1}"]},"metadata":{},"execution_count":211}]},{"cell_type":"code","source":["#we cn convert those quesiton index back to actual question by building a dictionnary of the question index and original questions that were previsouly generated\n","dict_decode_questions = {quest_index[i]: original_questions[i] for i in range(len(quest_index))}\n","\n","#then we replace the question index in the results by the original question from this decoder dictionnary\n","final_result = list((dict_decode_questions[int(idx)],value) for (idx,value) in result_test_image.items())\n","\n","#convert to dataframe and inspect\n","final_result\n","df_test = pd.DataFrame(final_result, columns=['question','predicted_answer'])\n","df_test.index = df_test.index.astype(int) #convert index to integer (it was a string)\n","df_test.replace({0:'yes', 1:'no'},inplace=True) #replace 0 by 1 and vice-versa because we inverted them before passing them into the VQA  model\n","df_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"executionInfo":{"status":"ok","timestamp":1700371093711,"user_tz":480,"elapsed":437,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"5aa4a921-37ed-48ce-b977-93e8806e8703","id":"ORv1Edy59jmg"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                     question predicted_answer\n","0      [is, web_gray, less, than, rosy_brown]               no\n","1   [is, web_gray, greater, than, rosy_brown]              yes\n","2      [is, rosy_brown, less, than, web_gray]              yes\n","3   [is, rosy_brown, greater, than, web_gray]               no\n","4           [is, web_gray, the, high, median]              yes\n","5            [is, web_gray, the, low, median]               no\n","6                [is, web_gray, the, minimum]               no\n","7                [is, web_gray, the, maximum]              yes\n","8         [is, rosy_brown, the, high, median]               no\n","9          [is, rosy_brown, the, low, median]              yes\n","10             [is, rosy_brown, the, minimum]              yes\n","11             [is, rosy_brown, the, maximum]               no"],"text/html":["\n","  <div id=\"df-612e4a59-6d9a-4a52-9d7a-554467743487\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question</th>\n","      <th>predicted_answer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[is, web_gray, less, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[is, web_gray, greater, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[is, rosy_brown, less, than, web_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[is, rosy_brown, greater, than, web_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[is, web_gray, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>[is, web_gray, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>[is, web_gray, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>[is, web_gray, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>[is, rosy_brown, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>[is, rosy_brown, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>[is, rosy_brown, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>[is, rosy_brown, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-612e4a59-6d9a-4a52-9d7a-554467743487')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-612e4a59-6d9a-4a52-9d7a-554467743487 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-612e4a59-6d9a-4a52-9d7a-554467743487');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3aedcb97-0d8f-4c63-afee-1ea5e9fc6fc9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3aedcb97-0d8f-4c63-afee-1ea5e9fc6fc9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3aedcb97-0d8f-4c63-afee-1ea5e9fc6fc9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7f2b8f57-3702-4732-9a10-81f45d104dbd\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7f2b8f57-3702-4732-9a10-81f45d104dbd button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":212}]},{"cell_type":"code","source":[],"metadata":{"id":"t6W6WIETB-qu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Apply to a test image - Intermediary horizontal bar chart example"],"metadata":{"id":"8WspDDa5B-7_"}},{"cell_type":"markdown","source":["### Parameters to tweak"],"metadata":{"id":"CiPK8sX9B-7_"}},{"cell_type":"code","source":["##############################################\n","#######   PARAMETERS TO TWEAK   ##############\n","##############################################\n","\n","#load global dictionnary that was trained on training dataset (build in part 1)\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","with open('global_dictionnary.txt','r') as f:\n","  text = f.read()\n","  global_dictionnary = eval(text)\n","#alternatively, uncomment the below line\n","#global_dictionnary = {'is': 30, 'the': 31, 'minimum': 32, 'maximum': 33, 'greater': 34, 'than': 35, 'less': 36, 'high': 37, 'median': 38, 'low': 39, 'does': 40, 'have': 41, 'area': 42, 'under': 43, 'curve': 44, 'smoothest': 45, 'roughest': 46, 'lowest': 47, 'value': 48, 'highest': 49, 'intersect': 50}\n","\n","\n","# Enter working directory where image to predict is\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/test')\n","#os.chdir('/content/gdrive/MyDrive/NorthWestern University/Course/AI Capstone/Data/datasets/train1/png')\n","\n","# Enter Image name\n","img_name = \"613.png\"\n","\n","#specify lenght for padding (based on trainign dataset from part 1 as well)\n","padding_length = 9\n","\n","#specifcy the distance at which nearby labels in the images hsoud be merged during OCR extraction (ex: merging the words 'organic' and 'search' as a single token 'organic_search')\n","dist_limit=4\n","\n","#change the chart type decoder here if needed (make sure the chart types are in the same order as their encoding in the model)\n","chart_type_decoding_values = ['dot_line','hbar_categorical', 'line','pie','vbar_categorical']"],"metadata":{"id":"Dky6F9Y7B-8A"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Run the below cells as is"],"metadata":{"id":"5sbT2G4rB-8A"}},{"cell_type":"code","source":["#run as is\n","result = generating_questions(img_name,global_dictionnary,padding_length,dist_limit)\n","\n","#can isolate each output from the function as follows:\n","original_questions = result[0]\n","encoded_questions = result[1]\n","img_name_array = result[2]\n","quest_index = result[3]\n","encoded_answers = torch.zeros((1,)) # WE DO NOT HAVE ANSWERS FOR TEST IMAGES, so passing an empty tensor\n","\n","print(original_questions)\n","print(encoded_questions)\n","print(img_name_array)\n","\n","#The tensor batched training Dataset object is created\n","test_preprocess_input = ImageDataset(img_name_array,encoded_questions,encoded_answers,quest_index,'test') #Preprocessing function is applied to the dataset\n","test_preprocess_input = DataLoader(test_preprocess_input,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700375441573,"user_tz":480,"elapsed":1241,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"c55a425b-78c6-4566-822a-b1781082c92f","id":"OpX8bCP2B-8A"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x79c2dbfce9e0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 260ms/step\n","this graph is a  hbar_categorical chart\n","this chart contains the labels ['dark_gray', 'slate', 'light_coral']\n","[['is', 'dark_gray', 'the', 'maximum'], ['is', 'dark_gray', 'the', 'minimum'], ['is', 'dark_gray', 'the', 'low', 'median'], ['is', 'dark_gray', 'the', 'high', 'median'], ['is', 'slate', 'the', 'maximum'], ['is', 'slate', 'the', 'minimum'], ['is', 'slate', 'the', 'low', 'median'], ['is', 'slate', 'the', 'high', 'median'], ['is', 'light_coral', 'the', 'maximum'], ['is', 'light_coral', 'the', 'minimum'], ['is', 'light_coral', 'the', 'low', 'median'], ['is', 'light_coral', 'the', 'high', 'median'], ['is', 'dark_gray', 'greater', 'than', 'slate'], ['is', 'dark_gray', 'less', 'than', 'slate'], ['is', 'dark_gray', 'greater', 'than', 'light_coral'], ['is', 'dark_gray', 'less', 'than', 'light_coral'], ['is', 'slate', 'greater', 'than', 'dark_gray'], ['is', 'slate', 'less', 'than', 'dark_gray'], ['is', 'slate', 'greater', 'than', 'light_coral'], ['is', 'slate', 'less', 'than', 'light_coral'], ['is', 'light_coral', 'greater', 'than', 'dark_gray'], ['is', 'light_coral', 'less', 'than', 'dark_gray'], ['is', 'light_coral', 'greater', 'than', 'slate'], ['is', 'light_coral', 'less', 'than', 'slate']]\n","[[30  1 31 33  0  0  0  0  0]\n"," [30  1 31 32  0  0  0  0  0]\n"," [30  1 31 39 38  0  0  0  0]\n"," [30  1 31 37 38  0  0  0  0]\n"," [30  2 31 33  0  0  0  0  0]\n"," [30  2 31 32  0  0  0  0  0]\n"," [30  2 31 39 38  0  0  0  0]\n"," [30  2 31 37 38  0  0  0  0]\n"," [30  3 31 33  0  0  0  0  0]\n"," [30  3 31 32  0  0  0  0  0]\n"," [30  3 31 39 38  0  0  0  0]\n"," [30  3 31 37 38  0  0  0  0]\n"," [30  1 34 35  2  0  0  0  0]\n"," [30  1 36 35  2  0  0  0  0]\n"," [30  1 34 35  3  0  0  0  0]\n"," [30  1 36 35  3  0  0  0  0]\n"," [30  2 34 35  1  0  0  0  0]\n"," [30  2 36 35  1  0  0  0  0]\n"," [30  2 34 35  3  0  0  0  0]\n"," [30  2 36 35  3  0  0  0  0]\n"," [30  3 34 35  1  0  0  0  0]\n"," [30  3 36 35  1  0  0  0  0]\n"," [30  3 34 35  2  0  0  0  0]\n"," [30  3 36 35  2  0  0  0  0]]\n","['613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png', '613.png']\n"]}]},{"cell_type":"code","source":["#display the image\n","img = load_img(img_name)\n","plt.imshow(img)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"PnmG_22xLgS4","executionInfo":{"status":"ok","timestamp":1700375448367,"user_tz":480,"elapsed":545,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"288d2262-d160-4d4a-e6a2-93c1e53e0979"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# VQA Model Details\n","\n","word_emb_dim = 32\n","ques_lstm_out = 256\n","num_hidden_act = 1024\n","num_rf_out = 256\n","num_bimodal_units = 256\n","q_len = 9 #question lenght\n","n1 = 51 #dictionnary lenght + 1\n","\n","image_encoder = 'dense'\n","\n","if image_encoder == 'dense':\n","    densenet_config = (6, 6, 6)\n","    densenet_dim = [128, 160, 352] # Might be nice to compute according to densenet_config\n","\n","\n","\n","# Training/Optimization\n","\n","root = '/mnt/gs/dynamic-chart-vqa-train-data'\n","optimizer = torch.optim.Adamax\n","test_interval = 5  # In epochs\n","test_every_epoch_after = 20\n","max_epochs = 15\n","overwrite_expt_dir = False  # For convenience, set to True while debugging\n","grad_clip = 50\n","\n","# Parameters for learning rate schedule\n","\n","lr = 7e-4*.7*.7*.7*.7\n","lr_decay_step = 2  # Decay every this many epochs\n","lr_decay_rate = .7\n","lr_decay_epochs = range(15, 25, lr_decay_step)\n","lr_warmup_steps = [0.5 * lr, 1.0 * lr, 1.0 * lr, 1.5 * lr, 2.0 * lr]\n","dropout_classifier = True"],"metadata":{"id":"yVQq1ypLB-8B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import argparse\n","import json\n","import os\n","import shutil\n","import sys\n","import torch\n","import torch.nn as nn\n","\n","\n","parser = argparse.ArgumentParser()\n","parser.add_argument('--evaluate', action='store_true')\n","parser.add_argument('--resume', action='store_true')\n","parser.add_argument('--expt_name', required=True, type=str)\n","parser.add_argument('--data_root', default='/mnt/gs/dynamic-chart-vqa-train-data', type=str)\n","\n","\n","args = parser.parse_args(args=['--evaluate','--expt_name','PreFil_Model_2', '--data_root', '/mnt/gs/dynamic-chart-vqa-train-data'])\n","\n","\n","\n","EXPT_DIR = os.path.join(args.data_root, 'experiments', args.expt_name)\n","\n","\n","\n","\n","\n","def inline_print(text):\n","    \"\"\"\n","    A simple helper to print text inline. Helpful for displaying training progress among other things.\n","    Args:\n","        text: Text to print inline\n","    \"\"\"\n","    sys.stdout.write('\\r' + text)\n","    sys.stdout.flush()\n","\n","\n","def fit(net, dataloader, criterion, optimizer, epoch):\n","    \"\"\"\n","    Train 1 epoch on the given dataloader and model\n","\n","    Args:\n","        net: Model instance to train\n","        dataloader: dataset to use\n","        criterion: Training objective\n","        optimizer: Optimizer to use\n","        epoch: Current Epoch\n","    \"\"\"\n","\n","    net.train()\n","    correct = 0\n","    total = 0\n","    total_loss = 0\n","    for i, q, a, ql, qid in dataloader: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the train index/question index\n","        q = q.cuda()\n","        i = i.cuda()\n","        ql = ql.cuda()\n","        a = a.cuda()\n","        p = net(i, q, ql)\n","        loss = criterion(p, a)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        nn.utils.clip_grad_norm_(net.parameters(), grad_clip)\n","        optimizer.step()\n","        p_scale = torch.sigmoid(p)\n","        pred_class = p_scale >= 0.5\n","        c = float(torch.sum(pred_class.float() == a))\n","        correct += c\n","        total += len(ql)\n","        total_loss += loss * len(ql)\n","        inline_print(\n","            f'Running {dataloader.dataset.split}, Processed {total} of {len(dataloader) * dataloader.batch_size} '\n","            f'Accuracy: {correct / total}, Loss: {total_loss / total}')\n","\n","    print(f'\\nTrain Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def predict(net, dataloaders, epoch):\n","    \"\"\"\n","    Evaluate 1 epoch on the given list of dataloaders and model, prints accuracy and saves predictions\n","\n","    Args:\n","        net: Model instance to train\n","        dataloaders: List of datasets to use\n","        epoch: Current Epoch\n","    \"\"\"\n","    net.eval()\n","    #for data in dataloaders: #dontneed this because I am not passing both a test_dataset and a validaiton_dataset (only doing validation_dataset). then uncommenting au subsequent mention of 'data' and replacing by dataloaders'\n","    correct = 0\n","    total = 0\n","    results = dict()\n","    with torch.no_grad():\n","        #for i, q, a, ql in data: #i is image tensor, q is question, a i\n","        for i, q, a, ql, qid in dataloaders: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the question index/dataste index\n","            q = q.cuda()\n","            i = i.cuda()\n","            ql = ql.cuda()\n","            a = a.cuda()\n","            p = net(i, q, ql)\n","            _, idx = p.max(dim=1)\n","            p_scale = torch.sigmoid(p)\n","            pred_class = p_scale >= 0.5 #increasing the threshold for prediction\n","            c = float(torch.sum(pred_class.float() == a))\n","            for qqid, curr_pred_class in zip(qid, pred_class):\n","              qqid = int(qqid.item())\n","              if qqid not in results:\n","                results[qqid] = int(curr_pred_class)\n","            correct += c\n","            total += len(ql)\n","            #print_str = f'Running {data.dataset.split}, Processed {total} of {len(data) * data.batch_size} '\n","            print_str = f'Running {dataloaders.dataset.split}, Processed {total} of {len(dataloaders) * dataloaders.batch_size} '\n","            #if 'test' not in data.dataset.split:\n","            if 'test' not in dataloaders.dataset.split:\n","                inline_print(print_str + f'Accuracy: {correct / total}')\n","            else:\n","                inline_print(print_str)\n","\n","    #result_file = os.path.join(EXPT_DIR, f'results_{data.dataset.split}_{epoch + 1}.json')\n","    result_file = os.path.join(EXPT_DIR, f'results_{dataloaders.dataset.split}_{epoch + 1}.json')\n","    json.dump(results, open(result_file, 'w'))\n","    print(f\"Saved {result_file}\")\n","    #if 'test' not in data.dataset.split:\n","    if 'test' not in dataloaders.dataset.split:\n","        #print(f'\\n{data.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","        print(f'\\n{dataloaders.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def make_experiment_directory():\n","    #if not args.evaluate and not args.resume and not overwrite_expt_dir:\n","    if not args.evaluate and not args.resume:\n","        if os.path.exists(EXPT_DIR):\n","            raise RuntimeError(f'Experiment directory {EXPT_DIR} already exists, '\n","                               f'and the config is set to do not overwrite')\n","\n","    if not os.path.exists(EXPT_DIR):\n","        os.makedirs(EXPT_DIR)\n","\n","\n","def update_learning_rate(epoch, optimizer):\n","    if epoch < len(lr_warmup_steps):\n","        optimizer.param_groups[0]['lr'] = lr_warmup_steps[epoch]\n","    elif epoch in lr_decay_epochs:\n","        optimizer.param_groups[0]['lr'] *= lr_decay_rate\n","\n","\n","def training_loop(net, train_loader, val_loaders,optimizer, criterion, start_epoch=0):\n","    for epoch in range(start_epoch, max_epochs):\n","        update_learning_rate(epoch, optimizer)\n","        fit(net, train_loader, criterion, optimizer, epoch)\n","        curr_epoch_path = os.path.join(EXPT_DIR, str(epoch + 1) + '.pth')\n","        latest_path = os.path.join(EXPT_DIR, 'latest.pth')\n","        data = {'model_state_dict': net.state_dict(),\n","                'optim_state_dict': optimizer.state_dict(),\n","                'epoch': epoch,\n","                'lr': optimizer.param_groups[0]['lr']}\n","        torch.save(data, curr_epoch_path)\n","        torch.save(data, latest_path)\n","\n","        if epoch % test_interval == 0 or epoch >= test_every_epoch_after:\n","            predict(net, val_loaders, epoch)\n","\n","\n","def evaluate_saved(net, dataloader):\n","    weights_path = os.path.join(EXPT_DIR, 'latest.pth')\n","    saved = torch.load(weights_path)\n","    net.eval()\n","    net.load_state_dict(saved['model_state_dict'])\n","    predict(net, dataloader, saved['epoch'])\n","\n","\n","# %%\n","def main():\n","    make_experiment_directory()\n","    #print('Building Dataloaders according to configuration')\n","\n","    if args.evaluate or args.resume:\n","    #    lut_location = os.path.join(EXPT_DIR, 'LUT.json')\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","    else:\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","\n","    print('Building model to train: ')\n","    net = PReFIL(n1, 1)\n","\n","    print(\"Model Overview: \")\n","    print(net)\n","    net.cuda()\n","    start_epoch = 0\n","    if not args.evaluate:\n","        print('Training...')\n","        #optimizer = optimizer(net.parameters(), lr=lr)\n","        optimizer = torch.optim.Adamax(net.parameters(), lr=7e-4)\n","        criterion = torch.nn.CrossEntropyLoss()\n","        criterion = nn.BCEWithLogitsLoss()\n","\n","        if args.resume:\n","            resumed_data = torch.load(os.path.join(EXPT_DIR, 'latest.pth'))\n","            print(f\"Resuming from epoch {resumed_data['epoch'] + 1}\")\n","            net.load_state_dict(resumed_data['model_state_dict'])\n","            #optimizer = optimizer(net.parameters(), lr=resumed_data['lr'])\n","            optimizer = torch.optim.Adamax(net.parameters(), lr=resumed_data['lr'])\n","            optimizer.load_state_dict(resumed_data['optim_state_dict'])\n","            start_epoch = resumed_data['epoch']\n","        training_loop(net,\n","                      train_data,\n","                      val_data,\n","                      optimizer, criterion, start_epoch)\n","\n","    else:\n","        print('Evaluating...')\n","        #evaluate_saved(net, val_data)\n","        evaluate_saved(net, test_data)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700375455760,"user_tz":480,"elapsed":1641,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"a95cc09f-7859-427e-f592-543072d843cb","id":"8HS6B2ycB-8B"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Building model to train: \n","Model Overview: \n","PReFIL(\n","  (rnn): QuestionEncoder(\n","    (embedding): Embedding(51, 32)\n","    (lstm): LSTM(32, 256)\n","  )\n","  (cnn): DenseNetEncoder(\n","    (densenet): DenseNet(\n","      (first_conv): Sequential(\n","        (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","        (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu0): ReLU(inplace=True)\n","        (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","      )\n","      (final_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (denseblock): ModuleList(\n","        (0): Sequential(\n","          (dblock0): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition1): _Transition(\n","            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (1): Sequential(\n","          (dblock1): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition2): _Transition(\n","            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (2): Sequential(\n","          (dblock2): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","        )\n","      )\n","    )\n","  )\n","  (bimodal_low): BimodalEmbedding(\n","    (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (bimodal_high): BimodalEmbedding(\n","    (bn): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (maxpool_low): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (rf_low): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (rf_high): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (classifier): Classifier(\n","    (relu): ReLU(inplace=True)\n","    (lin1): Linear(in_features=1024, out_features=1024, bias=True)\n","    (classifier): Linear(in_features=1024, out_features=1, bias=True)\n","    (drop): Dropout(p=0.5, inplace=False)\n","  )\n",")\n","Evaluating...\n","Running test, Processed 24 of 64 Saved /mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2/results_test_10.json\n"]}]},{"cell_type":"markdown","source":["### Inspect the Prediction Results"],"metadata":{"id":"_RZmUuT1B-8C"}},{"cell_type":"code","source":["#download the predictions\n","import json\n","# Change working directory to the location of the prediction result file\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2')\n","\n","\n","with open('results_test_10.json') as f:\n","    result_test_image = (json.load(f))\n"],"metadata":{"id":"30nKDyzBB-8C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#we cn convert those quesiton index back to actual question by building a dictionnary of the question index and original questions that were previsouly generated\n","dict_decode_questions = {quest_index[i]: original_questions[i] for i in range(len(quest_index))}\n","\n","#then we replace the question index in the results by the original question from this decoder dictionnary\n","final_result = list((dict_decode_questions[int(idx)],value) for (idx,value) in result_test_image.items())\n","\n","#convert to dataframe and inspect\n","final_result\n","df_test = pd.DataFrame(final_result, columns=['question','predicted_answer'])\n","df_test.index = df_test.index.astype(int) #convert index to integer (it was a string)\n","df_test.replace({0:'yes', 1:'no'},inplace=True) #replace 0 by 1 and vice-versa because we inverted them before passing them into the VQA  model\n","df_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":802},"executionInfo":{"status":"ok","timestamp":1700375464371,"user_tz":480,"elapsed":174,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"6f5a49f5-452d-4337-dbef-b1aca25997a4","id":"GhPDn0EgB-8C"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                       question predicted_answer\n","0          [is, light_coral, less, than, slate]               no\n","1       [is, light_coral, greater, than, slate]              yes\n","2      [is, light_coral, less, than, dark_gray]               no\n","3   [is, light_coral, greater, than, dark_gray]               no\n","4          [is, slate, less, than, light_coral]              yes\n","5       [is, slate, greater, than, light_coral]               no\n","6            [is, slate, less, than, dark_gray]              yes\n","7         [is, slate, greater, than, dark_gray]               no\n","8      [is, dark_gray, less, than, light_coral]               no\n","9   [is, dark_gray, greater, than, light_coral]               no\n","10           [is, dark_gray, less, than, slate]               no\n","11        [is, dark_gray, greater, than, slate]              yes\n","12         [is, light_coral, the, high, median]               no\n","13          [is, light_coral, the, low, median]               no\n","14              [is, light_coral, the, minimum]               no\n","15              [is, light_coral, the, maximum]              yes\n","16               [is, slate, the, high, median]               no\n","17                [is, slate, the, low, median]               no\n","18                    [is, slate, the, minimum]              yes\n","19                    [is, slate, the, maximum]               no\n","20           [is, dark_gray, the, high, median]              yes\n","21            [is, dark_gray, the, low, median]              yes\n","22                [is, dark_gray, the, minimum]               no\n","23                [is, dark_gray, the, maximum]               no"],"text/html":["\n","  <div id=\"df-0c748707-5962-4d63-9b38-cbd302fe8e3a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question</th>\n","      <th>predicted_answer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[is, light_coral, less, than, slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[is, light_coral, greater, than, slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[is, light_coral, less, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[is, light_coral, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[is, slate, less, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>[is, slate, greater, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>[is, slate, less, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>[is, slate, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>[is, dark_gray, less, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>[is, dark_gray, greater, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>[is, dark_gray, less, than, slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>[is, dark_gray, greater, than, slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>[is, light_coral, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>[is, light_coral, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>[is, light_coral, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>[is, light_coral, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>[is, slate, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>[is, slate, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>[is, slate, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>[is, slate, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>[is, dark_gray, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>[is, dark_gray, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>[is, dark_gray, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>[is, dark_gray, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c748707-5962-4d63-9b38-cbd302fe8e3a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0c748707-5962-4d63-9b38-cbd302fe8e3a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0c748707-5962-4d63-9b38-cbd302fe8e3a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-75205fa3-5a5f-4f33-a223-23639fbe9e42\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75205fa3-5a5f-4f33-a223-23639fbe9e42')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-75205fa3-5a5f-4f33-a223-23639fbe9e42 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_3e1d4c42-8d27-493b-8310-b0b3254a86ba\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3e1d4c42-8d27-493b-8310-b0b3254a86ba button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":[],"metadata":{"id":"pTIgGMl-QzXK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Apply to a test image - Complex horizontal bar chart example"],"metadata":{"id":"IDtsWm9CQzn4"}},{"cell_type":"markdown","source":["### Parameters to tweak"],"metadata":{"id":"0bROsZqVQzn5"}},{"cell_type":"code","source":["##############################################\n","#######   PARAMETERS TO TWEAK   ##############\n","##############################################\n","\n","#load global dictionnary that was trained on training dataset (build in part 1)\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","with open('global_dictionnary.txt','r') as f:\n","  text = f.read()\n","  global_dictionnary = eval(text)\n","#alternatively, uncomment the below line\n","#global_dictionnary = {'is': 30, 'the': 31, 'minimum': 32, 'maximum': 33, 'greater': 34, 'than': 35, 'less': 36, 'high': 37, 'median': 38, 'low': 39, 'does': 40, 'have': 41, 'area': 42, 'under': 43, 'curve': 44, 'smoothest': 45, 'roughest': 46, 'lowest': 47, 'value': 48, 'highest': 49, 'intersect': 50}\n","\n","\n","# Enter working directory where image to predict is\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/test')\n","#os.chdir('/content/gdrive/MyDrive/NorthWestern University/Course/AI Capstone/Data/datasets/train1/png')\n","\n","# Enter Image name\n","img_name = \"30.png\"\n","\n","#specify lenght for padding (based on trainign dataset from part 1 as well)\n","padding_length = 9\n","\n","#specifcy the distance at which nearby labels in the images hsoud be merged during OCR extraction (ex: merging the words 'organic' and 'search' as a single token 'organic_search')\n","dist_limit=4\n","\n","#change the chart type decoder here if needed (make sure the chart types are in the same order as their encoding in the model)\n","chart_type_decoding_values = ['dot_line','hbar_categorical', 'line','pie','vbar_categorical']"],"metadata":{"id":"1ODySFaeQzn5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Run the below cells as is"],"metadata":{"id":"ujwFwPDDQzn5"}},{"cell_type":"code","source":["#run as is\n","result = generating_questions(img_name,global_dictionnary,padding_length,dist_limit)\n","\n","#can isolate each output from the function as follows:\n","original_questions = result[0]\n","encoded_questions = result[1]\n","img_name_array = result[2]\n","quest_index = result[3]\n","encoded_answers = torch.zeros((1,)) # WE DO NOT HAVE ANSWERS FOR TEST IMAGES, so passing an empty tensor\n","\n","print(original_questions)\n","print(encoded_questions)\n","print(img_name_array)\n","\n","#The tensor batched training Dataset object is created\n","test_preprocess_input = ImageDataset(img_name_array,encoded_questions,encoded_answers,quest_index,'test') #Preprocessing function is applied to the dataset\n","test_preprocess_input = DataLoader(test_preprocess_input,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700375595373,"user_tz":480,"elapsed":2646,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"e6664e0a-7124-412d-df9f-75bb4d69c162","id":"UtPxQMo6Qzn5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 242ms/step\n","this graph is a  hbar_categorical chart\n","this chart contains the labels ['light_coral', 'chartreuse', 'web_green', 'dark_gray', 'dark_slate', 'yellow', 'rosy_brown', 'olive_drab', 'dark_olive', 'cadet_blue']\n","[['is', 'light_coral', 'the', 'maximum'], ['is', 'light_coral', 'the', 'minimum'], ['is', 'light_coral', 'the', 'low', 'median'], ['is', 'light_coral', 'the', 'high', 'median'], ['is', 'chartreuse', 'the', 'maximum'], ['is', 'chartreuse', 'the', 'minimum'], ['is', 'chartreuse', 'the', 'low', 'median'], ['is', 'chartreuse', 'the', 'high', 'median'], ['is', 'web_green', 'the', 'maximum'], ['is', 'web_green', 'the', 'minimum'], ['is', 'web_green', 'the', 'low', 'median'], ['is', 'web_green', 'the', 'high', 'median'], ['is', 'dark_gray', 'the', 'maximum'], ['is', 'dark_gray', 'the', 'minimum'], ['is', 'dark_gray', 'the', 'low', 'median'], ['is', 'dark_gray', 'the', 'high', 'median'], ['is', 'dark_slate', 'the', 'maximum'], ['is', 'dark_slate', 'the', 'minimum'], ['is', 'dark_slate', 'the', 'low', 'median'], ['is', 'dark_slate', 'the', 'high', 'median'], ['is', 'yellow', 'the', 'maximum'], ['is', 'yellow', 'the', 'minimum'], ['is', 'yellow', 'the', 'low', 'median'], ['is', 'yellow', 'the', 'high', 'median'], ['is', 'rosy_brown', 'the', 'maximum'], ['is', 'rosy_brown', 'the', 'minimum'], ['is', 'rosy_brown', 'the', 'low', 'median'], ['is', 'rosy_brown', 'the', 'high', 'median'], ['is', 'olive_drab', 'the', 'maximum'], ['is', 'olive_drab', 'the', 'minimum'], ['is', 'olive_drab', 'the', 'low', 'median'], ['is', 'olive_drab', 'the', 'high', 'median'], ['is', 'dark_olive', 'the', 'maximum'], ['is', 'dark_olive', 'the', 'minimum'], ['is', 'dark_olive', 'the', 'low', 'median'], ['is', 'dark_olive', 'the', 'high', 'median'], ['is', 'cadet_blue', 'the', 'maximum'], ['is', 'cadet_blue', 'the', 'minimum'], ['is', 'cadet_blue', 'the', 'low', 'median'], ['is', 'cadet_blue', 'the', 'high', 'median'], ['is', 'light_coral', 'greater', 'than', 'chartreuse'], ['is', 'light_coral', 'less', 'than', 'chartreuse'], ['is', 'light_coral', 'greater', 'than', 'web_green'], ['is', 'light_coral', 'less', 'than', 'web_green'], ['is', 'light_coral', 'greater', 'than', 'dark_gray'], ['is', 'light_coral', 'less', 'than', 'dark_gray'], ['is', 'light_coral', 'greater', 'than', 'dark_slate'], ['is', 'light_coral', 'less', 'than', 'dark_slate'], ['is', 'light_coral', 'greater', 'than', 'yellow'], ['is', 'light_coral', 'less', 'than', 'yellow'], ['is', 'light_coral', 'greater', 'than', 'rosy_brown'], ['is', 'light_coral', 'less', 'than', 'rosy_brown'], ['is', 'light_coral', 'greater', 'than', 'olive_drab'], ['is', 'light_coral', 'less', 'than', 'olive_drab'], ['is', 'light_coral', 'greater', 'than', 'dark_olive'], ['is', 'light_coral', 'less', 'than', 'dark_olive'], ['is', 'light_coral', 'greater', 'than', 'cadet_blue'], ['is', 'light_coral', 'less', 'than', 'cadet_blue'], ['is', 'chartreuse', 'greater', 'than', 'light_coral'], ['is', 'chartreuse', 'less', 'than', 'light_coral'], ['is', 'chartreuse', 'greater', 'than', 'web_green'], ['is', 'chartreuse', 'less', 'than', 'web_green'], ['is', 'chartreuse', 'greater', 'than', 'dark_gray'], ['is', 'chartreuse', 'less', 'than', 'dark_gray'], ['is', 'chartreuse', 'greater', 'than', 'dark_slate'], ['is', 'chartreuse', 'less', 'than', 'dark_slate'], ['is', 'chartreuse', 'greater', 'than', 'yellow'], ['is', 'chartreuse', 'less', 'than', 'yellow'], ['is', 'chartreuse', 'greater', 'than', 'rosy_brown'], ['is', 'chartreuse', 'less', 'than', 'rosy_brown'], ['is', 'chartreuse', 'greater', 'than', 'olive_drab'], ['is', 'chartreuse', 'less', 'than', 'olive_drab'], ['is', 'chartreuse', 'greater', 'than', 'dark_olive'], ['is', 'chartreuse', 'less', 'than', 'dark_olive'], ['is', 'chartreuse', 'greater', 'than', 'cadet_blue'], ['is', 'chartreuse', 'less', 'than', 'cadet_blue'], ['is', 'web_green', 'greater', 'than', 'light_coral'], ['is', 'web_green', 'less', 'than', 'light_coral'], ['is', 'web_green', 'greater', 'than', 'chartreuse'], ['is', 'web_green', 'less', 'than', 'chartreuse'], ['is', 'web_green', 'greater', 'than', 'dark_gray'], ['is', 'web_green', 'less', 'than', 'dark_gray'], ['is', 'web_green', 'greater', 'than', 'dark_slate'], ['is', 'web_green', 'less', 'than', 'dark_slate'], ['is', 'web_green', 'greater', 'than', 'yellow'], ['is', 'web_green', 'less', 'than', 'yellow'], ['is', 'web_green', 'greater', 'than', 'rosy_brown'], ['is', 'web_green', 'less', 'than', 'rosy_brown'], ['is', 'web_green', 'greater', 'than', 'olive_drab'], ['is', 'web_green', 'less', 'than', 'olive_drab'], ['is', 'web_green', 'greater', 'than', 'dark_olive'], ['is', 'web_green', 'less', 'than', 'dark_olive'], ['is', 'web_green', 'greater', 'than', 'cadet_blue'], ['is', 'web_green', 'less', 'than', 'cadet_blue'], ['is', 'dark_gray', 'greater', 'than', 'light_coral'], ['is', 'dark_gray', 'less', 'than', 'light_coral'], ['is', 'dark_gray', 'greater', 'than', 'chartreuse'], ['is', 'dark_gray', 'less', 'than', 'chartreuse'], ['is', 'dark_gray', 'greater', 'than', 'web_green'], ['is', 'dark_gray', 'less', 'than', 'web_green'], ['is', 'dark_gray', 'greater', 'than', 'dark_slate'], ['is', 'dark_gray', 'less', 'than', 'dark_slate'], ['is', 'dark_gray', 'greater', 'than', 'yellow'], ['is', 'dark_gray', 'less', 'than', 'yellow'], ['is', 'dark_gray', 'greater', 'than', 'rosy_brown'], ['is', 'dark_gray', 'less', 'than', 'rosy_brown'], ['is', 'dark_gray', 'greater', 'than', 'olive_drab'], ['is', 'dark_gray', 'less', 'than', 'olive_drab'], ['is', 'dark_gray', 'greater', 'than', 'dark_olive'], ['is', 'dark_gray', 'less', 'than', 'dark_olive'], ['is', 'dark_gray', 'greater', 'than', 'cadet_blue'], ['is', 'dark_gray', 'less', 'than', 'cadet_blue'], ['is', 'dark_slate', 'greater', 'than', 'light_coral'], ['is', 'dark_slate', 'less', 'than', 'light_coral'], ['is', 'dark_slate', 'greater', 'than', 'chartreuse'], ['is', 'dark_slate', 'less', 'than', 'chartreuse'], ['is', 'dark_slate', 'greater', 'than', 'web_green'], ['is', 'dark_slate', 'less', 'than', 'web_green'], ['is', 'dark_slate', 'greater', 'than', 'dark_gray'], ['is', 'dark_slate', 'less', 'than', 'dark_gray'], ['is', 'dark_slate', 'greater', 'than', 'yellow'], ['is', 'dark_slate', 'less', 'than', 'yellow'], ['is', 'dark_slate', 'greater', 'than', 'rosy_brown'], ['is', 'dark_slate', 'less', 'than', 'rosy_brown'], ['is', 'dark_slate', 'greater', 'than', 'olive_drab'], ['is', 'dark_slate', 'less', 'than', 'olive_drab'], ['is', 'dark_slate', 'greater', 'than', 'dark_olive'], ['is', 'dark_slate', 'less', 'than', 'dark_olive'], ['is', 'dark_slate', 'greater', 'than', 'cadet_blue'], ['is', 'dark_slate', 'less', 'than', 'cadet_blue'], ['is', 'yellow', 'greater', 'than', 'light_coral'], ['is', 'yellow', 'less', 'than', 'light_coral'], ['is', 'yellow', 'greater', 'than', 'chartreuse'], ['is', 'yellow', 'less', 'than', 'chartreuse'], ['is', 'yellow', 'greater', 'than', 'web_green'], ['is', 'yellow', 'less', 'than', 'web_green'], ['is', 'yellow', 'greater', 'than', 'dark_gray'], ['is', 'yellow', 'less', 'than', 'dark_gray'], ['is', 'yellow', 'greater', 'than', 'dark_slate'], ['is', 'yellow', 'less', 'than', 'dark_slate'], ['is', 'yellow', 'greater', 'than', 'rosy_brown'], ['is', 'yellow', 'less', 'than', 'rosy_brown'], ['is', 'yellow', 'greater', 'than', 'olive_drab'], ['is', 'yellow', 'less', 'than', 'olive_drab'], ['is', 'yellow', 'greater', 'than', 'dark_olive'], ['is', 'yellow', 'less', 'than', 'dark_olive'], ['is', 'yellow', 'greater', 'than', 'cadet_blue'], ['is', 'yellow', 'less', 'than', 'cadet_blue'], ['is', 'rosy_brown', 'greater', 'than', 'light_coral'], ['is', 'rosy_brown', 'less', 'than', 'light_coral'], ['is', 'rosy_brown', 'greater', 'than', 'chartreuse'], ['is', 'rosy_brown', 'less', 'than', 'chartreuse'], ['is', 'rosy_brown', 'greater', 'than', 'web_green'], ['is', 'rosy_brown', 'less', 'than', 'web_green'], ['is', 'rosy_brown', 'greater', 'than', 'dark_gray'], ['is', 'rosy_brown', 'less', 'than', 'dark_gray'], ['is', 'rosy_brown', 'greater', 'than', 'dark_slate'], ['is', 'rosy_brown', 'less', 'than', 'dark_slate'], ['is', 'rosy_brown', 'greater', 'than', 'yellow'], ['is', 'rosy_brown', 'less', 'than', 'yellow'], ['is', 'rosy_brown', 'greater', 'than', 'olive_drab'], ['is', 'rosy_brown', 'less', 'than', 'olive_drab'], ['is', 'rosy_brown', 'greater', 'than', 'dark_olive'], ['is', 'rosy_brown', 'less', 'than', 'dark_olive'], ['is', 'rosy_brown', 'greater', 'than', 'cadet_blue'], ['is', 'rosy_brown', 'less', 'than', 'cadet_blue'], ['is', 'olive_drab', 'greater', 'than', 'light_coral'], ['is', 'olive_drab', 'less', 'than', 'light_coral'], ['is', 'olive_drab', 'greater', 'than', 'chartreuse'], ['is', 'olive_drab', 'less', 'than', 'chartreuse'], ['is', 'olive_drab', 'greater', 'than', 'web_green'], ['is', 'olive_drab', 'less', 'than', 'web_green'], ['is', 'olive_drab', 'greater', 'than', 'dark_gray'], ['is', 'olive_drab', 'less', 'than', 'dark_gray'], ['is', 'olive_drab', 'greater', 'than', 'dark_slate'], ['is', 'olive_drab', 'less', 'than', 'dark_slate'], ['is', 'olive_drab', 'greater', 'than', 'yellow'], ['is', 'olive_drab', 'less', 'than', 'yellow'], ['is', 'olive_drab', 'greater', 'than', 'rosy_brown'], ['is', 'olive_drab', 'less', 'than', 'rosy_brown'], ['is', 'olive_drab', 'greater', 'than', 'dark_olive'], ['is', 'olive_drab', 'less', 'than', 'dark_olive'], ['is', 'olive_drab', 'greater', 'than', 'cadet_blue'], ['is', 'olive_drab', 'less', 'than', 'cadet_blue'], ['is', 'dark_olive', 'greater', 'than', 'light_coral'], ['is', 'dark_olive', 'less', 'than', 'light_coral'], ['is', 'dark_olive', 'greater', 'than', 'chartreuse'], ['is', 'dark_olive', 'less', 'than', 'chartreuse'], ['is', 'dark_olive', 'greater', 'than', 'web_green'], ['is', 'dark_olive', 'less', 'than', 'web_green'], ['is', 'dark_olive', 'greater', 'than', 'dark_gray'], ['is', 'dark_olive', 'less', 'than', 'dark_gray'], ['is', 'dark_olive', 'greater', 'than', 'dark_slate'], ['is', 'dark_olive', 'less', 'than', 'dark_slate'], ['is', 'dark_olive', 'greater', 'than', 'yellow'], ['is', 'dark_olive', 'less', 'than', 'yellow'], ['is', 'dark_olive', 'greater', 'than', 'rosy_brown'], ['is', 'dark_olive', 'less', 'than', 'rosy_brown'], ['is', 'dark_olive', 'greater', 'than', 'olive_drab'], ['is', 'dark_olive', 'less', 'than', 'olive_drab'], ['is', 'dark_olive', 'greater', 'than', 'cadet_blue'], ['is', 'dark_olive', 'less', 'than', 'cadet_blue'], ['is', 'cadet_blue', 'greater', 'than', 'light_coral'], ['is', 'cadet_blue', 'less', 'than', 'light_coral'], ['is', 'cadet_blue', 'greater', 'than', 'chartreuse'], ['is', 'cadet_blue', 'less', 'than', 'chartreuse'], ['is', 'cadet_blue', 'greater', 'than', 'web_green'], ['is', 'cadet_blue', 'less', 'than', 'web_green'], ['is', 'cadet_blue', 'greater', 'than', 'dark_gray'], ['is', 'cadet_blue', 'less', 'than', 'dark_gray'], ['is', 'cadet_blue', 'greater', 'than', 'dark_slate'], ['is', 'cadet_blue', 'less', 'than', 'dark_slate'], ['is', 'cadet_blue', 'greater', 'than', 'yellow'], ['is', 'cadet_blue', 'less', 'than', 'yellow'], ['is', 'cadet_blue', 'greater', 'than', 'rosy_brown'], ['is', 'cadet_blue', 'less', 'than', 'rosy_brown'], ['is', 'cadet_blue', 'greater', 'than', 'olive_drab'], ['is', 'cadet_blue', 'less', 'than', 'olive_drab'], ['is', 'cadet_blue', 'greater', 'than', 'dark_olive'], ['is', 'cadet_blue', 'less', 'than', 'dark_olive']]\n","[[30  1 31 ...  0  0  0]\n"," [30  1 31 ...  0  0  0]\n"," [30  1 31 ...  0  0  0]\n"," ...\n"," [30 10 36 ...  0  0  0]\n"," [30 10 34 ...  0  0  0]\n"," [30 10 36 ...  0  0  0]]\n","['30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png', '30.png']\n"]}]},{"cell_type":"code","source":["['is', 'light_coral', 'the', 'maximum'], ['is', 'light_coral', 'the', 'minimum'], ['is', 'light_coral', 'the', 'low', 'median'], '...' , ['is', 'cadet_blue', 'less', 'than', 'olive_drab'], ['is', 'cadet_blue', 'greater', 'than', 'dark_olive'], ['is', 'cadet_blue', 'less', 'than', 'dark_olive']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6tWIoegZq-Vz","executionInfo":{"status":"ok","timestamp":1700399403812,"user_tz":480,"elapsed":181,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"0bd956bc-5fcd-4069-f270-cdd9a6f7311a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(['is', 'light_coral', 'the', 'maximum'],\n"," ['is', 'light_coral', 'the', 'minimum'],\n"," ['is', 'light_coral', 'the', 'low', 'median'],\n"," '...',\n"," ['is', 'cadet_blue', 'less', 'than', 'olive_drab'],\n"," ['is', 'cadet_blue', 'greater', 'than', 'dark_olive'],\n"," ['is', 'cadet_blue', 'less', 'than', 'dark_olive'])"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["#display the image\n","img = load_img(img_name)\n","plt.imshow(img)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"executionInfo":{"status":"ok","timestamp":1700375599242,"user_tz":480,"elapsed":531,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"37b6db76-f6ee-4962-8468-71d74ea2bac5","id":"D1OD7FuOQzn5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# VQA Model Details\n","\n","word_emb_dim = 32\n","ques_lstm_out = 256\n","num_hidden_act = 1024\n","num_rf_out = 256\n","num_bimodal_units = 256\n","q_len = 9 #question lenght\n","n1 = 51 #dictionnary lenght + 1\n","\n","image_encoder = 'dense'\n","\n","if image_encoder == 'dense':\n","    densenet_config = (6, 6, 6)\n","    densenet_dim = [128, 160, 352] # Might be nice to compute according to densenet_config\n","\n","\n","\n","# Training/Optimization\n","\n","root = '/mnt/gs/dynamic-chart-vqa-train-data'\n","optimizer = torch.optim.Adamax\n","test_interval = 5  # In epochs\n","test_every_epoch_after = 20\n","max_epochs = 15\n","overwrite_expt_dir = False  # For convenience, set to True while debugging\n","grad_clip = 50\n","\n","# Parameters for learning rate schedule\n","\n","lr = 7e-4*.7*.7*.7*.7\n","lr_decay_step = 2  # Decay every this many epochs\n","lr_decay_rate = .7\n","lr_decay_epochs = range(15, 25, lr_decay_step)\n","lr_warmup_steps = [0.5 * lr, 1.0 * lr, 1.0 * lr, 1.5 * lr, 2.0 * lr]\n","dropout_classifier = True"],"metadata":{"id":"Pf0arOkAQzn5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import argparse\n","import json\n","import os\n","import shutil\n","import sys\n","import torch\n","import torch.nn as nn\n","\n","\n","parser = argparse.ArgumentParser()\n","parser.add_argument('--evaluate', action='store_true')\n","parser.add_argument('--resume', action='store_true')\n","parser.add_argument('--expt_name', required=True, type=str)\n","parser.add_argument('--data_root', default='/mnt/gs/dynamic-chart-vqa-train-data', type=str)\n","\n","\n","args = parser.parse_args(args=['--evaluate','--expt_name','PreFil_Model_2', '--data_root', '/mnt/gs/dynamic-chart-vqa-train-data'])\n","\n","\n","\n","EXPT_DIR = os.path.join(args.data_root, 'experiments', args.expt_name)\n","\n","\n","\n","\n","\n","def inline_print(text):\n","    \"\"\"\n","    A simple helper to print text inline. Helpful for displaying training progress among other things.\n","    Args:\n","        text: Text to print inline\n","    \"\"\"\n","    sys.stdout.write('\\r' + text)\n","    sys.stdout.flush()\n","\n","\n","def fit(net, dataloader, criterion, optimizer, epoch):\n","    \"\"\"\n","    Train 1 epoch on the given dataloader and model\n","\n","    Args:\n","        net: Model instance to train\n","        dataloader: dataset to use\n","        criterion: Training objective\n","        optimizer: Optimizer to use\n","        epoch: Current Epoch\n","    \"\"\"\n","\n","    net.train()\n","    correct = 0\n","    total = 0\n","    total_loss = 0\n","    for i, q, a, ql, qid in dataloader: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the train index/question index\n","        q = q.cuda()\n","        i = i.cuda()\n","        ql = ql.cuda()\n","        a = a.cuda()\n","        p = net(i, q, ql)\n","        loss = criterion(p, a)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        nn.utils.clip_grad_norm_(net.parameters(), grad_clip)\n","        optimizer.step()\n","        p_scale = torch.sigmoid(p)\n","        pred_class = p_scale >= 0.5\n","        c = float(torch.sum(pred_class.float() == a))\n","        correct += c\n","        total += len(ql)\n","        total_loss += loss * len(ql)\n","        inline_print(\n","            f'Running {dataloader.dataset.split}, Processed {total} of {len(dataloader) * dataloader.batch_size} '\n","            f'Accuracy: {correct / total}, Loss: {total_loss / total}')\n","\n","    print(f'\\nTrain Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def predict(net, dataloaders, epoch):\n","    \"\"\"\n","    Evaluate 1 epoch on the given list of dataloaders and model, prints accuracy and saves predictions\n","\n","    Args:\n","        net: Model instance to train\n","        dataloaders: List of datasets to use\n","        epoch: Current Epoch\n","    \"\"\"\n","    net.eval()\n","    #for data in dataloaders: #dontneed this because I am not passing both a test_dataset and a validaiton_dataset (only doing validation_dataset). then uncommenting au subsequent mention of 'data' and replacing by dataloaders'\n","    correct = 0\n","    total = 0\n","    results = dict()\n","    with torch.no_grad():\n","        #for i, q, a, ql in data: #i is image tensor, q is question, a i\n","        for i, q, a, ql, qid in dataloaders: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the question index/dataste index\n","            q = q.cuda()\n","            i = i.cuda()\n","            ql = ql.cuda()\n","            a = a.cuda()\n","            p = net(i, q, ql)\n","            _, idx = p.max(dim=1)\n","            p_scale = torch.sigmoid(p)\n","            pred_class = p_scale >= 0.5 #increasing the threshold for prediction\n","            c = float(torch.sum(pred_class.float() == a))\n","            for qqid, curr_pred_class in zip(qid, pred_class):\n","              qqid = int(qqid.item())\n","              if qqid not in results:\n","                results[qqid] = int(curr_pred_class)\n","            correct += c\n","            total += len(ql)\n","            #print_str = f'Running {data.dataset.split}, Processed {total} of {len(data) * data.batch_size} '\n","            print_str = f'Running {dataloaders.dataset.split}, Processed {total} of {len(dataloaders) * dataloaders.batch_size} '\n","            #if 'test' not in data.dataset.split:\n","            if 'test' not in dataloaders.dataset.split:\n","                inline_print(print_str + f'Accuracy: {correct / total}')\n","            else:\n","                inline_print(print_str)\n","\n","    #result_file = os.path.join(EXPT_DIR, f'results_{data.dataset.split}_{epoch + 1}.json')\n","    result_file = os.path.join(EXPT_DIR, f'results_{dataloaders.dataset.split}_{epoch + 1}.json')\n","    json.dump(results, open(result_file, 'w'))\n","    print(f\"Saved {result_file}\")\n","    #if 'test' not in data.dataset.split:\n","    if 'test' not in dataloaders.dataset.split:\n","        #print(f'\\n{data.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","        print(f'\\n{dataloaders.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def make_experiment_directory():\n","    #if not args.evaluate and not args.resume and not overwrite_expt_dir:\n","    if not args.evaluate and not args.resume:\n","        if os.path.exists(EXPT_DIR):\n","            raise RuntimeError(f'Experiment directory {EXPT_DIR} already exists, '\n","                               f'and the config is set to do not overwrite')\n","\n","    if not os.path.exists(EXPT_DIR):\n","        os.makedirs(EXPT_DIR)\n","\n","\n","def update_learning_rate(epoch, optimizer):\n","    if epoch < len(lr_warmup_steps):\n","        optimizer.param_groups[0]['lr'] = lr_warmup_steps[epoch]\n","    elif epoch in lr_decay_epochs:\n","        optimizer.param_groups[0]['lr'] *= lr_decay_rate\n","\n","\n","def training_loop(net, train_loader, val_loaders,optimizer, criterion, start_epoch=0):\n","    for epoch in range(start_epoch, max_epochs):\n","        update_learning_rate(epoch, optimizer)\n","        fit(net, train_loader, criterion, optimizer, epoch)\n","        curr_epoch_path = os.path.join(EXPT_DIR, str(epoch + 1) + '.pth')\n","        latest_path = os.path.join(EXPT_DIR, 'latest.pth')\n","        data = {'model_state_dict': net.state_dict(),\n","                'optim_state_dict': optimizer.state_dict(),\n","                'epoch': epoch,\n","                'lr': optimizer.param_groups[0]['lr']}\n","        torch.save(data, curr_epoch_path)\n","        torch.save(data, latest_path)\n","\n","        if epoch % test_interval == 0 or epoch >= test_every_epoch_after:\n","            predict(net, val_loaders, epoch)\n","\n","\n","def evaluate_saved(net, dataloader):\n","    weights_path = os.path.join(EXPT_DIR, 'latest.pth')\n","    saved = torch.load(weights_path)\n","    net.eval()\n","    net.load_state_dict(saved['model_state_dict'])\n","    predict(net, dataloader, saved['epoch'])\n","\n","\n","# %%\n","def main():\n","    make_experiment_directory()\n","    #print('Building Dataloaders according to configuration')\n","\n","    if args.evaluate or args.resume:\n","    #    lut_location = os.path.join(EXPT_DIR, 'LUT.json')\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","    else:\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","\n","    print('Building model to train: ')\n","    net = PReFIL(n1, 1)\n","\n","    print(\"Model Overview: \")\n","    print(net)\n","    net.cuda()\n","    start_epoch = 0\n","    if not args.evaluate:\n","        print('Training...')\n","        #optimizer = optimizer(net.parameters(), lr=lr)\n","        optimizer = torch.optim.Adamax(net.parameters(), lr=7e-4)\n","        criterion = torch.nn.CrossEntropyLoss()\n","        criterion = nn.BCEWithLogitsLoss()\n","\n","        if args.resume:\n","            resumed_data = torch.load(os.path.join(EXPT_DIR, 'latest.pth'))\n","            print(f\"Resuming from epoch {resumed_data['epoch'] + 1}\")\n","            net.load_state_dict(resumed_data['model_state_dict'])\n","            #optimizer = optimizer(net.parameters(), lr=resumed_data['lr'])\n","            optimizer = torch.optim.Adamax(net.parameters(), lr=resumed_data['lr'])\n","            optimizer.load_state_dict(resumed_data['optim_state_dict'])\n","            start_epoch = resumed_data['epoch']\n","        training_loop(net,\n","                      train_data,\n","                      val_data,\n","                      optimizer, criterion, start_epoch)\n","\n","    else:\n","        print('Evaluating...')\n","        #evaluate_saved(net, val_data)\n","        evaluate_saved(net, test_data)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700375608580,"user_tz":480,"elapsed":2698,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"00d8b209-14eb-43f0-c892-2a210da74278","id":"9rCELkz3Qzn6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Building model to train: \n","Model Overview: \n","PReFIL(\n","  (rnn): QuestionEncoder(\n","    (embedding): Embedding(51, 32)\n","    (lstm): LSTM(32, 256)\n","  )\n","  (cnn): DenseNetEncoder(\n","    (densenet): DenseNet(\n","      (first_conv): Sequential(\n","        (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","        (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu0): ReLU(inplace=True)\n","        (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","      )\n","      (final_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (denseblock): ModuleList(\n","        (0): Sequential(\n","          (dblock0): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition1): _Transition(\n","            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (1): Sequential(\n","          (dblock1): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition2): _Transition(\n","            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (2): Sequential(\n","          (dblock2): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","        )\n","      )\n","    )\n","  )\n","  (bimodal_low): BimodalEmbedding(\n","    (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (bimodal_high): BimodalEmbedding(\n","    (bn): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (maxpool_low): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (rf_low): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (rf_high): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (classifier): Classifier(\n","    (relu): ReLU(inplace=True)\n","    (lin1): Linear(in_features=1024, out_features=1024, bias=True)\n","    (classifier): Linear(in_features=1024, out_features=1, bias=True)\n","    (drop): Dropout(p=0.5, inplace=False)\n","  )\n",")\n","Evaluating...\n","Running test, Processed 220 of 256 Saved /mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2/results_test_10.json\n"]}]},{"cell_type":"markdown","source":["### Inspect the Prediction Results"],"metadata":{"id":"jsmIL0HVQzn6"}},{"cell_type":"code","source":["#download the predictions\n","import json\n","# Change working directory to the location of the prediction result file\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2')\n","\n","\n","with open('results_test_10.json') as f:\n","    result_test_image = (json.load(f))\n"],"metadata":{"id":"DPVMGrIxQzn6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pd.set_option('display.max_rows', None)\n","\n","\n","#we cn convert those quesiton index back to actual question by building a dictionnary of the question index and original questions that were previsouly generated\n","dict_decode_questions = {quest_index[i]: original_questions[i] for i in range(len(quest_index))}\n","\n","#then we replace the question index in the results by the original question from this decoder dictionnary\n","final_result = list((dict_decode_questions[int(idx)],value) for (idx,value) in result_test_image.items())\n","\n","#convert to dataframe and inspect\n","final_result\n","df_test = pd.DataFrame(final_result, columns=['question','predicted_answer'])\n","df_test.index = df_test.index.astype(int) #convert index to integer (it was a string)\n","df_test.replace({0:'yes', 1:'no'},inplace=True) #replace 0 by 1 and vice-versa because we inverted them before passing them into the VQA  model\n","df_test.head(220)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1700375672375,"user_tz":480,"elapsed":209,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"b71bd69a-0e53-4ce2-f203-70a42723582a","id":"b2sCqIiyQzn7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                         question predicted_answer\n","0         [is, chartreuse, less, than, dark_gray]              yes\n","1      [is, chartreuse, greater, than, dark_gray]               no\n","2         [is, chartreuse, less, than, web_green]               no\n","3      [is, chartreuse, greater, than, web_green]               no\n","4       [is, chartreuse, less, than, light_coral]               no\n","5    [is, chartreuse, greater, than, light_coral]               no\n","6       [is, light_coral, less, than, cadet_blue]              yes\n","7    [is, light_coral, greater, than, cadet_blue]               no\n","8       [is, light_coral, less, than, dark_olive]               no\n","9    [is, light_coral, greater, than, dark_olive]              yes\n","10      [is, light_coral, less, than, olive_drab]               no\n","11   [is, light_coral, greater, than, olive_drab]              yes\n","12      [is, light_coral, less, than, rosy_brown]              yes\n","13   [is, light_coral, greater, than, rosy_brown]              yes\n","14          [is, light_coral, less, than, yellow]              yes\n","15       [is, light_coral, greater, than, yellow]               no\n","16      [is, light_coral, less, than, dark_slate]               no\n","17   [is, light_coral, greater, than, dark_slate]               no\n","18       [is, light_coral, less, than, dark_gray]              yes\n","19    [is, light_coral, greater, than, dark_gray]               no\n","20       [is, light_coral, less, than, web_green]               no\n","21    [is, light_coral, greater, than, web_green]               no\n","22      [is, light_coral, less, than, chartreuse]               no\n","23   [is, light_coral, greater, than, chartreuse]               no\n","24            [is, cadet_blue, the, high, median]              yes\n","25             [is, cadet_blue, the, low, median]              yes\n","26                 [is, cadet_blue, the, minimum]              yes\n","27                 [is, cadet_blue, the, maximum]              yes\n","28            [is, dark_olive, the, high, median]              yes\n","29             [is, dark_olive, the, low, median]               no\n","30                 [is, dark_olive, the, minimum]               no\n","31                 [is, dark_olive, the, maximum]               no\n","32            [is, olive_drab, the, high, median]              yes\n","33             [is, olive_drab, the, low, median]               no\n","34                 [is, olive_drab, the, minimum]               no\n","35                 [is, olive_drab, the, maximum]               no\n","36            [is, rosy_brown, the, high, median]              yes\n","37             [is, rosy_brown, the, low, median]               no\n","38                 [is, rosy_brown, the, minimum]               no\n","39                 [is, rosy_brown, the, maximum]               no\n","40                [is, yellow, the, high, median]               no\n","41                 [is, yellow, the, low, median]              yes\n","42                     [is, yellow, the, minimum]              yes\n","43                     [is, yellow, the, maximum]               no\n","44            [is, dark_slate, the, high, median]               no\n","45             [is, dark_slate, the, low, median]              yes\n","46                 [is, dark_slate, the, minimum]              yes\n","47                 [is, dark_slate, the, maximum]              yes\n","48             [is, dark_gray, the, high, median]               no\n","49              [is, dark_gray, the, low, median]               no\n","50                  [is, dark_gray, the, minimum]              yes\n","51                  [is, dark_gray, the, maximum]              yes\n","52             [is, web_green, the, high, median]               no\n","53              [is, web_green, the, low, median]              yes\n","54                  [is, web_green, the, minimum]              yes\n","55                  [is, web_green, the, maximum]              yes\n","56            [is, chartreuse, the, high, median]              yes\n","57             [is, chartreuse, the, low, median]               no\n","58                 [is, chartreuse, the, minimum]              yes\n","59                 [is, chartreuse, the, maximum]              yes\n","60           [is, light_coral, the, high, median]              yes\n","61            [is, light_coral, the, low, median]              yes\n","62                [is, light_coral, the, minimum]              yes\n","63                [is, light_coral, the, maximum]              yes\n","64       [is, dark_slate, less, than, dark_olive]               no\n","65    [is, dark_slate, greater, than, dark_olive]              yes\n","66       [is, dark_slate, less, than, olive_drab]              yes\n","67    [is, dark_slate, greater, than, olive_drab]               no\n","68       [is, dark_slate, less, than, rosy_brown]              yes\n","69    [is, dark_slate, greater, than, rosy_brown]               no\n","70           [is, dark_slate, less, than, yellow]              yes\n","71        [is, dark_slate, greater, than, yellow]               no\n","72        [is, dark_slate, less, than, dark_gray]              yes\n","73     [is, dark_slate, greater, than, dark_gray]               no\n","74        [is, dark_slate, less, than, web_green]               no\n","75     [is, dark_slate, greater, than, web_green]               no\n","76       [is, dark_slate, less, than, chartreuse]               no\n","77    [is, dark_slate, greater, than, chartreuse]               no\n","78      [is, dark_slate, less, than, light_coral]              yes\n","79   [is, dark_slate, greater, than, light_coral]               no\n","80        [is, dark_gray, less, than, cadet_blue]              yes\n","81     [is, dark_gray, greater, than, cadet_blue]               no\n","82        [is, dark_gray, less, than, dark_olive]              yes\n","83     [is, dark_gray, greater, than, dark_olive]               no\n","84        [is, dark_gray, less, than, olive_drab]              yes\n","85     [is, dark_gray, greater, than, olive_drab]              yes\n","86        [is, dark_gray, less, than, rosy_brown]               no\n","87     [is, dark_gray, greater, than, rosy_brown]              yes\n","88            [is, dark_gray, less, than, yellow]               no\n","89         [is, dark_gray, greater, than, yellow]               no\n","90        [is, dark_gray, less, than, dark_slate]               no\n","91     [is, dark_gray, greater, than, dark_slate]              yes\n","92         [is, dark_gray, less, than, web_green]              yes\n","93      [is, dark_gray, greater, than, web_green]               no\n","94        [is, dark_gray, less, than, chartreuse]              yes\n","95     [is, dark_gray, greater, than, chartreuse]               no\n","96       [is, dark_gray, less, than, light_coral]               no\n","97    [is, dark_gray, greater, than, light_coral]              yes\n","98        [is, web_green, less, than, cadet_blue]               no\n","99     [is, web_green, greater, than, cadet_blue]               no\n","100       [is, web_green, less, than, dark_olive]              yes\n","101    [is, web_green, greater, than, dark_olive]              yes\n","102       [is, web_green, less, than, olive_drab]              yes\n","103    [is, web_green, greater, than, olive_drab]               no\n","104       [is, web_green, less, than, rosy_brown]               no\n","105    [is, web_green, greater, than, rosy_brown]              yes\n","106           [is, web_green, less, than, yellow]               no\n","107        [is, web_green, greater, than, yellow]               no\n","108       [is, web_green, less, than, dark_slate]              yes\n","109    [is, web_green, greater, than, dark_slate]              yes\n","110        [is, web_green, less, than, dark_gray]               no\n","111     [is, web_green, greater, than, dark_gray]              yes\n","112       [is, web_green, less, than, chartreuse]               no\n","113    [is, web_green, greater, than, chartreuse]               no\n","114      [is, web_green, less, than, light_coral]               no\n","115   [is, web_green, greater, than, light_coral]               no\n","116      [is, chartreuse, less, than, cadet_blue]              yes\n","117   [is, chartreuse, greater, than, cadet_blue]               no\n","118      [is, chartreuse, less, than, dark_olive]              yes\n","119   [is, chartreuse, greater, than, dark_olive]               no\n","120      [is, chartreuse, less, than, olive_drab]               no\n","121   [is, chartreuse, greater, than, olive_drab]              yes\n","122      [is, chartreuse, less, than, rosy_brown]               no\n","123   [is, chartreuse, greater, than, rosy_brown]              yes\n","124          [is, chartreuse, less, than, yellow]               no\n","125       [is, chartreuse, greater, than, yellow]               no\n","126      [is, chartreuse, less, than, dark_slate]              yes\n","127   [is, chartreuse, greater, than, dark_slate]              yes\n","128       [is, dark_olive, less, than, dark_gray]              yes\n","129    [is, dark_olive, greater, than, dark_gray]               no\n","130       [is, dark_olive, less, than, web_green]              yes\n","131    [is, dark_olive, greater, than, web_green]              yes\n","132      [is, dark_olive, less, than, chartreuse]              yes\n","133   [is, dark_olive, greater, than, chartreuse]               no\n","134     [is, dark_olive, less, than, light_coral]               no\n","135  [is, dark_olive, greater, than, light_coral]              yes\n","136      [is, olive_drab, less, than, cadet_blue]              yes\n","137   [is, olive_drab, greater, than, cadet_blue]               no\n","138      [is, olive_drab, less, than, dark_olive]              yes\n","139   [is, olive_drab, greater, than, dark_olive]               no\n","140      [is, olive_drab, less, than, rosy_brown]               no\n","141   [is, olive_drab, greater, than, rosy_brown]              yes\n","142          [is, olive_drab, less, than, yellow]               no\n","143       [is, olive_drab, greater, than, yellow]               no\n","144      [is, olive_drab, less, than, dark_slate]               no\n","145   [is, olive_drab, greater, than, dark_slate]               no\n","146       [is, olive_drab, less, than, dark_gray]              yes\n","147    [is, olive_drab, greater, than, dark_gray]               no\n","148       [is, olive_drab, less, than, web_green]              yes\n","149    [is, olive_drab, greater, than, web_green]              yes\n","150      [is, olive_drab, less, than, chartreuse]               no\n","151   [is, olive_drab, greater, than, chartreuse]               no\n","152     [is, olive_drab, less, than, light_coral]               no\n","153  [is, olive_drab, greater, than, light_coral]              yes\n","154      [is, rosy_brown, less, than, cadet_blue]              yes\n","155   [is, rosy_brown, greater, than, cadet_blue]               no\n","156      [is, rosy_brown, less, than, dark_olive]              yes\n","157   [is, rosy_brown, greater, than, dark_olive]              yes\n","158      [is, rosy_brown, less, than, olive_drab]              yes\n","159   [is, rosy_brown, greater, than, olive_drab]               no\n","160          [is, rosy_brown, less, than, yellow]               no\n","161       [is, rosy_brown, greater, than, yellow]              yes\n","162      [is, rosy_brown, less, than, dark_slate]               no\n","163   [is, rosy_brown, greater, than, dark_slate]              yes\n","164       [is, rosy_brown, less, than, dark_gray]              yes\n","165    [is, rosy_brown, greater, than, dark_gray]               no\n","166       [is, rosy_brown, less, than, web_green]              yes\n","167    [is, rosy_brown, greater, than, web_green]              yes\n","168      [is, rosy_brown, less, than, chartreuse]               no\n","169   [is, rosy_brown, greater, than, chartreuse]               no\n","170     [is, rosy_brown, less, than, light_coral]              yes\n","171  [is, rosy_brown, greater, than, light_coral]              yes\n","172          [is, yellow, less, than, cadet_blue]              yes\n","173       [is, yellow, greater, than, cadet_blue]               no\n","174          [is, yellow, less, than, dark_olive]               no\n","175       [is, yellow, greater, than, dark_olive]              yes\n","176          [is, yellow, less, than, olive_drab]               no\n","177       [is, yellow, greater, than, olive_drab]               no\n","178          [is, yellow, less, than, rosy_brown]              yes\n","179       [is, yellow, greater, than, rosy_brown]               no\n","180          [is, yellow, less, than, dark_slate]               no\n","181       [is, yellow, greater, than, dark_slate]              yes\n","182           [is, yellow, less, than, dark_gray]               no\n","183        [is, yellow, greater, than, dark_gray]               no\n","184           [is, yellow, less, than, web_green]               no\n","185        [is, yellow, greater, than, web_green]              yes\n","186          [is, yellow, less, than, chartreuse]               no\n","187       [is, yellow, greater, than, chartreuse]               no\n","188         [is, yellow, less, than, light_coral]              yes\n","189      [is, yellow, greater, than, light_coral]               no\n","190      [is, dark_slate, less, than, cadet_blue]              yes\n","191   [is, dark_slate, greater, than, cadet_blue]               no\n","192      [is, cadet_blue, less, than, dark_olive]               no\n","193   [is, cadet_blue, greater, than, dark_olive]              yes\n","194      [is, cadet_blue, less, than, olive_drab]              yes\n","195   [is, cadet_blue, greater, than, olive_drab]               no\n","196      [is, cadet_blue, less, than, rosy_brown]              yes\n","197   [is, cadet_blue, greater, than, rosy_brown]               no\n","198          [is, cadet_blue, less, than, yellow]              yes\n","199       [is, cadet_blue, greater, than, yellow]               no\n","200      [is, cadet_blue, less, than, dark_slate]               no\n","201   [is, cadet_blue, greater, than, dark_slate]              yes\n","202       [is, cadet_blue, less, than, dark_gray]               no\n","203    [is, cadet_blue, greater, than, dark_gray]              yes\n","204       [is, cadet_blue, less, than, web_green]               no\n","205    [is, cadet_blue, greater, than, web_green]               no\n","206      [is, cadet_blue, less, than, chartreuse]               no\n","207   [is, cadet_blue, greater, than, chartreuse]               no\n","208     [is, cadet_blue, less, than, light_coral]              yes\n","209  [is, cadet_blue, greater, than, light_coral]              yes\n","210      [is, dark_olive, less, than, cadet_blue]              yes\n","211   [is, dark_olive, greater, than, cadet_blue]               no\n","212      [is, dark_olive, less, than, olive_drab]               no\n","213   [is, dark_olive, greater, than, olive_drab]              yes\n","214      [is, dark_olive, less, than, rosy_brown]               no\n","215   [is, dark_olive, greater, than, rosy_brown]              yes\n","216          [is, dark_olive, less, than, yellow]               no\n","217       [is, dark_olive, greater, than, yellow]              yes\n","218      [is, dark_olive, less, than, dark_slate]               no\n","219   [is, dark_olive, greater, than, dark_slate]               no"],"text/html":["\n","  <div id=\"df-0a72514d-a1a4-472d-b5d7-3f40a1a972e7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question</th>\n","      <th>predicted_answer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[is, chartreuse, less, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[is, chartreuse, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[is, chartreuse, less, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[is, chartreuse, greater, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[is, chartreuse, less, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>[is, chartreuse, greater, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>[is, light_coral, less, than, cadet_blue]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>[is, light_coral, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>[is, light_coral, less, than, dark_olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>[is, light_coral, greater, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>[is, light_coral, less, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>[is, light_coral, greater, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>[is, light_coral, less, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>[is, light_coral, greater, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>[is, light_coral, less, than, yellow]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>[is, light_coral, greater, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>[is, light_coral, less, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>[is, light_coral, greater, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>[is, light_coral, less, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>[is, light_coral, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>[is, light_coral, less, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>[is, light_coral, greater, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>[is, light_coral, less, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>[is, light_coral, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>[is, cadet_blue, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>[is, cadet_blue, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>[is, cadet_blue, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>[is, cadet_blue, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>[is, dark_olive, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>[is, dark_olive, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>[is, dark_olive, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>[is, dark_olive, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>[is, olive_drab, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>[is, olive_drab, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>[is, olive_drab, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>[is, olive_drab, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>[is, rosy_brown, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>[is, rosy_brown, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>[is, rosy_brown, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>[is, rosy_brown, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>[is, yellow, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>[is, yellow, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>[is, yellow, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>[is, yellow, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>[is, dark_slate, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>[is, dark_slate, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>[is, dark_slate, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>[is, dark_slate, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>[is, dark_gray, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>[is, dark_gray, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>[is, dark_gray, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>[is, dark_gray, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>[is, web_green, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>[is, web_green, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>[is, web_green, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>[is, web_green, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>[is, chartreuse, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>[is, chartreuse, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>[is, chartreuse, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>[is, chartreuse, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>[is, light_coral, the, high, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>[is, light_coral, the, low, median]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>[is, light_coral, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>[is, light_coral, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>[is, dark_slate, less, than, dark_olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>[is, dark_slate, greater, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>[is, dark_slate, less, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>[is, dark_slate, greater, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>[is, dark_slate, less, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>[is, dark_slate, greater, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>[is, dark_slate, less, than, yellow]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>[is, dark_slate, greater, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>72</th>\n","      <td>[is, dark_slate, less, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>73</th>\n","      <td>[is, dark_slate, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>74</th>\n","      <td>[is, dark_slate, less, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>75</th>\n","      <td>[is, dark_slate, greater, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>76</th>\n","      <td>[is, dark_slate, less, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>[is, dark_slate, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>78</th>\n","      <td>[is, dark_slate, less, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>79</th>\n","      <td>[is, dark_slate, greater, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>[is, dark_gray, less, than, cadet_blue]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>81</th>\n","      <td>[is, dark_gray, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>82</th>\n","      <td>[is, dark_gray, less, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>83</th>\n","      <td>[is, dark_gray, greater, than, dark_olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>84</th>\n","      <td>[is, dark_gray, less, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>85</th>\n","      <td>[is, dark_gray, greater, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>[is, dark_gray, less, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>[is, dark_gray, greater, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>88</th>\n","      <td>[is, dark_gray, less, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>[is, dark_gray, greater, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>[is, dark_gray, less, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>91</th>\n","      <td>[is, dark_gray, greater, than, dark_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>92</th>\n","      <td>[is, dark_gray, less, than, web_green]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>93</th>\n","      <td>[is, dark_gray, greater, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>94</th>\n","      <td>[is, dark_gray, less, than, chartreuse]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>[is, dark_gray, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>[is, dark_gray, less, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>[is, dark_gray, greater, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>[is, web_green, less, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>[is, web_green, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>100</th>\n","      <td>[is, web_green, less, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>101</th>\n","      <td>[is, web_green, greater, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>102</th>\n","      <td>[is, web_green, less, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>103</th>\n","      <td>[is, web_green, greater, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>104</th>\n","      <td>[is, web_green, less, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>105</th>\n","      <td>[is, web_green, greater, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>106</th>\n","      <td>[is, web_green, less, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>107</th>\n","      <td>[is, web_green, greater, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>108</th>\n","      <td>[is, web_green, less, than, dark_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>109</th>\n","      <td>[is, web_green, greater, than, dark_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>[is, web_green, less, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>111</th>\n","      <td>[is, web_green, greater, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>112</th>\n","      <td>[is, web_green, less, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>113</th>\n","      <td>[is, web_green, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>114</th>\n","      <td>[is, web_green, less, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>115</th>\n","      <td>[is, web_green, greater, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>116</th>\n","      <td>[is, chartreuse, less, than, cadet_blue]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>117</th>\n","      <td>[is, chartreuse, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>118</th>\n","      <td>[is, chartreuse, less, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>119</th>\n","      <td>[is, chartreuse, greater, than, dark_olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>120</th>\n","      <td>[is, chartreuse, less, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>121</th>\n","      <td>[is, chartreuse, greater, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>122</th>\n","      <td>[is, chartreuse, less, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>123</th>\n","      <td>[is, chartreuse, greater, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>124</th>\n","      <td>[is, chartreuse, less, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>125</th>\n","      <td>[is, chartreuse, greater, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>126</th>\n","      <td>[is, chartreuse, less, than, dark_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>127</th>\n","      <td>[is, chartreuse, greater, than, dark_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>128</th>\n","      <td>[is, dark_olive, less, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>129</th>\n","      <td>[is, dark_olive, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>130</th>\n","      <td>[is, dark_olive, less, than, web_green]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>131</th>\n","      <td>[is, dark_olive, greater, than, web_green]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>132</th>\n","      <td>[is, dark_olive, less, than, chartreuse]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>133</th>\n","      <td>[is, dark_olive, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>134</th>\n","      <td>[is, dark_olive, less, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>135</th>\n","      <td>[is, dark_olive, greater, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>136</th>\n","      <td>[is, olive_drab, less, than, cadet_blue]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>137</th>\n","      <td>[is, olive_drab, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>138</th>\n","      <td>[is, olive_drab, less, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>139</th>\n","      <td>[is, olive_drab, greater, than, dark_olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>140</th>\n","      <td>[is, olive_drab, less, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>141</th>\n","      <td>[is, olive_drab, greater, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>142</th>\n","      <td>[is, olive_drab, less, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>143</th>\n","      <td>[is, olive_drab, greater, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>144</th>\n","      <td>[is, olive_drab, less, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>[is, olive_drab, greater, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>[is, olive_drab, less, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>[is, olive_drab, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>[is, olive_drab, less, than, web_green]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>[is, olive_drab, greater, than, web_green]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>150</th>\n","      <td>[is, olive_drab, less, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>151</th>\n","      <td>[is, olive_drab, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>152</th>\n","      <td>[is, olive_drab, less, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>[is, olive_drab, greater, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>154</th>\n","      <td>[is, rosy_brown, less, than, cadet_blue]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>155</th>\n","      <td>[is, rosy_brown, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>156</th>\n","      <td>[is, rosy_brown, less, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>157</th>\n","      <td>[is, rosy_brown, greater, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>158</th>\n","      <td>[is, rosy_brown, less, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>159</th>\n","      <td>[is, rosy_brown, greater, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>160</th>\n","      <td>[is, rosy_brown, less, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>161</th>\n","      <td>[is, rosy_brown, greater, than, yellow]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>162</th>\n","      <td>[is, rosy_brown, less, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>163</th>\n","      <td>[is, rosy_brown, greater, than, dark_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>164</th>\n","      <td>[is, rosy_brown, less, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>165</th>\n","      <td>[is, rosy_brown, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>166</th>\n","      <td>[is, rosy_brown, less, than, web_green]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>167</th>\n","      <td>[is, rosy_brown, greater, than, web_green]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>168</th>\n","      <td>[is, rosy_brown, less, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>169</th>\n","      <td>[is, rosy_brown, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>170</th>\n","      <td>[is, rosy_brown, less, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>171</th>\n","      <td>[is, rosy_brown, greater, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>172</th>\n","      <td>[is, yellow, less, than, cadet_blue]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>[is, yellow, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>174</th>\n","      <td>[is, yellow, less, than, dark_olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>175</th>\n","      <td>[is, yellow, greater, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>176</th>\n","      <td>[is, yellow, less, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>177</th>\n","      <td>[is, yellow, greater, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>178</th>\n","      <td>[is, yellow, less, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>179</th>\n","      <td>[is, yellow, greater, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>180</th>\n","      <td>[is, yellow, less, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>181</th>\n","      <td>[is, yellow, greater, than, dark_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>182</th>\n","      <td>[is, yellow, less, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>183</th>\n","      <td>[is, yellow, greater, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>[is, yellow, less, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>185</th>\n","      <td>[is, yellow, greater, than, web_green]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>186</th>\n","      <td>[is, yellow, less, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>187</th>\n","      <td>[is, yellow, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>188</th>\n","      <td>[is, yellow, less, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>189</th>\n","      <td>[is, yellow, greater, than, light_coral]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>190</th>\n","      <td>[is, dark_slate, less, than, cadet_blue]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>191</th>\n","      <td>[is, dark_slate, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>192</th>\n","      <td>[is, cadet_blue, less, than, dark_olive]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>193</th>\n","      <td>[is, cadet_blue, greater, than, dark_olive]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>194</th>\n","      <td>[is, cadet_blue, less, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>[is, cadet_blue, greater, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>[is, cadet_blue, less, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>[is, cadet_blue, greater, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>[is, cadet_blue, less, than, yellow]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>[is, cadet_blue, greater, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>[is, cadet_blue, less, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>201</th>\n","      <td>[is, cadet_blue, greater, than, dark_slate]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>202</th>\n","      <td>[is, cadet_blue, less, than, dark_gray]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>203</th>\n","      <td>[is, cadet_blue, greater, than, dark_gray]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>204</th>\n","      <td>[is, cadet_blue, less, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>205</th>\n","      <td>[is, cadet_blue, greater, than, web_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>206</th>\n","      <td>[is, cadet_blue, less, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>207</th>\n","      <td>[is, cadet_blue, greater, than, chartreuse]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>208</th>\n","      <td>[is, cadet_blue, less, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>209</th>\n","      <td>[is, cadet_blue, greater, than, light_coral]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>210</th>\n","      <td>[is, dark_olive, less, than, cadet_blue]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>[is, dark_olive, greater, than, cadet_blue]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>[is, dark_olive, less, than, olive_drab]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>[is, dark_olive, greater, than, olive_drab]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>[is, dark_olive, less, than, rosy_brown]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>[is, dark_olive, greater, than, rosy_brown]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>216</th>\n","      <td>[is, dark_olive, less, than, yellow]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>217</th>\n","      <td>[is, dark_olive, greater, than, yellow]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>218</th>\n","      <td>[is, dark_olive, less, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>219</th>\n","      <td>[is, dark_olive, greater, than, dark_slate]</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0a72514d-a1a4-472d-b5d7-3f40a1a972e7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0a72514d-a1a4-472d-b5d7-3f40a1a972e7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0a72514d-a1a4-472d-b5d7-3f40a1a972e7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a984aee6-6f9b-4a19-bb6f-c5e799c40e16\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a984aee6-6f9b-4a19-bb6f-c5e799c40e16')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a984aee6-6f9b-4a19-bb6f-c5e799c40e16 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":[],"metadata":{"id":"k5LQ90EYhHHD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Apply to a test image - Pie chart example"],"metadata":{"id":"XGY99AtVvnKf"}},{"cell_type":"markdown","source":["### Parameters to tweak"],"metadata":{"id":"v19TWdhjvnKo"}},{"cell_type":"code","source":["##############################################\n","#######   PARAMETERS TO TWEAK   ##############\n","##############################################\n","\n","#load global dictionnary that was trained on training dataset (build in part 1)\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","with open('global_dictionnary.txt','r') as f:\n","  text = f.read()\n","  global_dictionnary = eval(text)\n","#alternatively, uncomment the below line\n","#global_dictionnary = {'is': 30, 'the': 31, 'minimum': 32, 'maximum': 33, 'greater': 34, 'than': 35, 'less': 36, 'high': 37, 'median': 38, 'low': 39, 'does': 40, 'have': 41, 'area': 42, 'under': 43, 'curve': 44, 'smoothest': 45, 'roughest': 46, 'lowest': 47, 'value': 48, 'highest': 49, 'intersect': 50}\n","\n","\n","# Enter working directory where image to predict is\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/test')\n","#os.chdir('/content/gdrive/MyDrive/NorthWestern University/Course/AI Capstone/Data/datasets/train1/png')\n","\n","# Enter Image name\n","img_name = \"262.png\"\n","\n","#specify lenght for padding (based on trainign dataset from part 1 as well)\n","padding_length = 9\n","\n","#specifcy the distance at which nearby labels in the images hsoud be merged during OCR extraction (ex: merging the words 'organic' and 'search' as a single token 'organic_search')\n","dist_limit=4\n","\n","#change the chart type decoder here if needed (make sure the chart types are in the same order as their encoding in the model)\n","chart_type_decoding_values = ['dot_line','hbar_categorical', 'line','pie','vbar_categorical']"],"metadata":{"id":"tSwm5D_nvnKo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Run the below cells as is"],"metadata":{"id":"f-_DWefSvnKo"}},{"cell_type":"code","source":["#run as is\n","result = generating_questions(img_name,global_dictionnary,padding_length,dist_limit)\n","\n","#can isolate each output from the function as follows:\n","original_questions = result[0]\n","encoded_questions = result[1]\n","img_name_array = result[2]\n","quest_index = result[3]\n","encoded_answers = torch.zeros((1,)) # WE DO NOT HAVE ANSWERS FOR TEST IMAGES, so passing an empty tensor\n","\n","print(original_questions)\n","print(encoded_questions)\n","print(img_name_array)\n","\n","#The tensor batched training Dataset object is created\n","test_preprocess_input = ImageDataset(img_name_array,encoded_questions,encoded_answers,quest_index,'test') #Preprocessing function is applied to the dataset\n","test_preprocess_input = DataLoader(test_preprocess_input,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700383591333,"user_tz":480,"elapsed":1245,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"640d9549-da26-4c6f-9129-735ff683c31d","id":"O8kkLhePvnKo"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 259ms/step\n","this graph is a  pie chart\n","this chart contains the labels ['light_green', 'dark_orchid']\n","[['is', 'light_green', 'the', 'maximum'], ['is', 'light_green', 'the', 'minimum'], ['is', 'light_green', 'the', 'low', 'median'], ['is', 'light_green', 'the', 'high', 'median'], ['is', 'dark_orchid', 'the', 'maximum'], ['is', 'dark_orchid', 'the', 'minimum'], ['is', 'dark_orchid', 'the', 'low', 'median'], ['is', 'dark_orchid', 'the', 'high', 'median'], ['is', 'light_green', 'greater', 'than', 'dark_orchid'], ['is', 'light_green', 'less', 'than', 'dark_orchid'], ['is', 'dark_orchid', 'greater', 'than', 'light_green'], ['is', 'dark_orchid', 'less', 'than', 'light_green']]\n","[[30  1 31 33  0  0  0  0  0]\n"," [30  1 31 32  0  0  0  0  0]\n"," [30  1 31 39 38  0  0  0  0]\n"," [30  1 31 37 38  0  0  0  0]\n"," [30  2 31 33  0  0  0  0  0]\n"," [30  2 31 32  0  0  0  0  0]\n"," [30  2 31 39 38  0  0  0  0]\n"," [30  2 31 37 38  0  0  0  0]\n"," [30  1 34 35  2  0  0  0  0]\n"," [30  1 36 35  2  0  0  0  0]\n"," [30  2 34 35  1  0  0  0  0]\n"," [30  2 36 35  1  0  0  0  0]]\n","['262.png', '262.png', '262.png', '262.png', '262.png', '262.png', '262.png', '262.png', '262.png', '262.png', '262.png', '262.png']\n"]}]},{"cell_type":"code","source":["#display the image\n","img = load_img(img_name)\n","plt.imshow(img)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":486},"executionInfo":{"status":"ok","timestamp":1700383598381,"user_tz":480,"elapsed":437,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"43d4bcdb-0e79-45d6-99ce-4607b277224a","id":"eHGEgO8LvnKp"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# VQA Model Details\n","\n","word_emb_dim = 32\n","ques_lstm_out = 256\n","num_hidden_act = 1024\n","num_rf_out = 256\n","num_bimodal_units = 256\n","q_len = 9 #question lenght\n","n1 = 51 #dictionnary lenght + 1\n","\n","image_encoder = 'dense'\n","\n","if image_encoder == 'dense':\n","    densenet_config = (6, 6, 6)\n","    densenet_dim = [128, 160, 352] # Might be nice to compute according to densenet_config\n","\n","\n","\n","# Training/Optimization\n","\n","root = '/mnt/gs/dynamic-chart-vqa-train-data'\n","optimizer = torch.optim.Adamax\n","test_interval = 5  # In epochs\n","test_every_epoch_after = 20\n","max_epochs = 15\n","overwrite_expt_dir = False  # For convenience, set to True while debugging\n","grad_clip = 50\n","\n","# Parameters for learning rate schedule\n","\n","lr = 7e-4*.7*.7*.7*.7\n","lr_decay_step = 2  # Decay every this many epochs\n","lr_decay_rate = .7\n","lr_decay_epochs = range(15, 25, lr_decay_step)\n","lr_warmup_steps = [0.5 * lr, 1.0 * lr, 1.0 * lr, 1.5 * lr, 2.0 * lr]\n","dropout_classifier = True"],"metadata":{"id":"8G7oQcO_vnKp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import argparse\n","import json\n","import os\n","import shutil\n","import sys\n","import torch\n","import torch.nn as nn\n","\n","\n","parser = argparse.ArgumentParser()\n","parser.add_argument('--evaluate', action='store_true')\n","parser.add_argument('--resume', action='store_true')\n","parser.add_argument('--expt_name', required=True, type=str)\n","parser.add_argument('--data_root', default='/mnt/gs/dynamic-chart-vqa-train-data', type=str)\n","\n","\n","args = parser.parse_args(args=['--evaluate','--expt_name','PreFil_Model_2', '--data_root', '/mnt/gs/dynamic-chart-vqa-train-data'])\n","\n","\n","\n","EXPT_DIR = os.path.join(args.data_root, 'experiments', args.expt_name)\n","\n","\n","\n","\n","\n","def inline_print(text):\n","    \"\"\"\n","    A simple helper to print text inline. Helpful for displaying training progress among other things.\n","    Args:\n","        text: Text to print inline\n","    \"\"\"\n","    sys.stdout.write('\\r' + text)\n","    sys.stdout.flush()\n","\n","\n","def fit(net, dataloader, criterion, optimizer, epoch):\n","    \"\"\"\n","    Train 1 epoch on the given dataloader and model\n","\n","    Args:\n","        net: Model instance to train\n","        dataloader: dataset to use\n","        criterion: Training objective\n","        optimizer: Optimizer to use\n","        epoch: Current Epoch\n","    \"\"\"\n","\n","    net.train()\n","    correct = 0\n","    total = 0\n","    total_loss = 0\n","    for i, q, a, ql, qid in dataloader: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the train index/question index\n","        q = q.cuda()\n","        i = i.cuda()\n","        ql = ql.cuda()\n","        a = a.cuda()\n","        p = net(i, q, ql)\n","        loss = criterion(p, a)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        nn.utils.clip_grad_norm_(net.parameters(), grad_clip)\n","        optimizer.step()\n","        p_scale = torch.sigmoid(p)\n","        pred_class = p_scale >= 0.5\n","        c = float(torch.sum(pred_class.float() == a))\n","        correct += c\n","        total += len(ql)\n","        total_loss += loss * len(ql)\n","        inline_print(\n","            f'Running {dataloader.dataset.split}, Processed {total} of {len(dataloader) * dataloader.batch_size} '\n","            f'Accuracy: {correct / total}, Loss: {total_loss / total}')\n","\n","    print(f'\\nTrain Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def predict(net, dataloaders, epoch):\n","    \"\"\"\n","    Evaluate 1 epoch on the given list of dataloaders and model, prints accuracy and saves predictions\n","\n","    Args:\n","        net: Model instance to train\n","        dataloaders: List of datasets to use\n","        epoch: Current Epoch\n","    \"\"\"\n","    net.eval()\n","    #for data in dataloaders: #dontneed this because I am not passing both a test_dataset and a validaiton_dataset (only doing validation_dataset). then uncommenting au subsequent mention of 'data' and replacing by dataloaders'\n","    correct = 0\n","    total = 0\n","    results = dict()\n","    with torch.no_grad():\n","        #for i, q, a, ql in data: #i is image tensor, q is question, a i\n","        for i, q, a, ql, qid in dataloaders: #i is image tensor, q is question, a is answer, ql is question lenght, qid is the question index/dataste index\n","            q = q.cuda()\n","            i = i.cuda()\n","            ql = ql.cuda()\n","            a = a.cuda()\n","            p = net(i, q, ql)\n","            _, idx = p.max(dim=1)\n","            p_scale = torch.sigmoid(p)\n","            pred_class = p_scale >= 0.5 #increasing the threshold for prediction\n","            c = float(torch.sum(pred_class.float() == a))\n","            for qqid, curr_pred_class in zip(qid, pred_class):\n","              qqid = int(qqid.item())\n","              if qqid not in results:\n","                results[qqid] = int(curr_pred_class)\n","            correct += c\n","            total += len(ql)\n","            #print_str = f'Running {data.dataset.split}, Processed {total} of {len(data) * data.batch_size} '\n","            print_str = f'Running {dataloaders.dataset.split}, Processed {total} of {len(dataloaders) * dataloaders.batch_size} '\n","            #if 'test' not in data.dataset.split:\n","            if 'test' not in dataloaders.dataset.split:\n","                inline_print(print_str + f'Accuracy: {correct / total}')\n","            else:\n","                inline_print(print_str)\n","\n","    #result_file = os.path.join(EXPT_DIR, f'results_{data.dataset.split}_{epoch + 1}.json')\n","    result_file = os.path.join(EXPT_DIR, f'results_{dataloaders.dataset.split}_{epoch + 1}.json')\n","    json.dump(results, open(result_file, 'w'))\n","    print(f\"Saved {result_file}\")\n","    #if 'test' not in data.dataset.split:\n","    if 'test' not in dataloaders.dataset.split:\n","        #print(f'\\n{data.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","        print(f'\\n{dataloaders.dataset.split} Accuracy for Epoch {epoch + 1}: {correct / total}')\n","\n","\n","def make_experiment_directory():\n","    #if not args.evaluate and not args.resume and not overwrite_expt_dir:\n","    if not args.evaluate and not args.resume:\n","        if os.path.exists(EXPT_DIR):\n","            raise RuntimeError(f'Experiment directory {EXPT_DIR} already exists, '\n","                               f'and the config is set to do not overwrite')\n","\n","    if not os.path.exists(EXPT_DIR):\n","        os.makedirs(EXPT_DIR)\n","\n","\n","def update_learning_rate(epoch, optimizer):\n","    if epoch < len(lr_warmup_steps):\n","        optimizer.param_groups[0]['lr'] = lr_warmup_steps[epoch]\n","    elif epoch in lr_decay_epochs:\n","        optimizer.param_groups[0]['lr'] *= lr_decay_rate\n","\n","\n","def training_loop(net, train_loader, val_loaders,optimizer, criterion, start_epoch=0):\n","    for epoch in range(start_epoch, max_epochs):\n","        update_learning_rate(epoch, optimizer)\n","        fit(net, train_loader, criterion, optimizer, epoch)\n","        curr_epoch_path = os.path.join(EXPT_DIR, str(epoch + 1) + '.pth')\n","        latest_path = os.path.join(EXPT_DIR, 'latest.pth')\n","        data = {'model_state_dict': net.state_dict(),\n","                'optim_state_dict': optimizer.state_dict(),\n","                'epoch': epoch,\n","                'lr': optimizer.param_groups[0]['lr']}\n","        torch.save(data, curr_epoch_path)\n","        torch.save(data, latest_path)\n","\n","        if epoch % test_interval == 0 or epoch >= test_every_epoch_after:\n","            predict(net, val_loaders, epoch)\n","\n","\n","def evaluate_saved(net, dataloader):\n","    weights_path = os.path.join(EXPT_DIR, 'latest.pth')\n","    saved = torch.load(weights_path)\n","    net.eval()\n","    net.load_state_dict(saved['model_state_dict'])\n","    predict(net, dataloader, saved['epoch'])\n","\n","\n","# %%\n","def main():\n","    make_experiment_directory()\n","    #print('Building Dataloaders according to configuration')\n","\n","    if args.evaluate or args.resume:\n","    #    lut_location = os.path.join(EXPT_DIR, 'LUT.json')\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","    else:\n","        train_data = train_dataset\n","        val_data = validation_dataset\n","        test_data = test_preprocess_input\n","\n","    print('Building model to train: ')\n","    net = PReFIL(n1, 1)\n","\n","    print(\"Model Overview: \")\n","    print(net)\n","    net.cuda()\n","    start_epoch = 0\n","    if not args.evaluate:\n","        print('Training...')\n","        #optimizer = optimizer(net.parameters(), lr=lr)\n","        optimizer = torch.optim.Adamax(net.parameters(), lr=7e-4)\n","        criterion = torch.nn.CrossEntropyLoss()\n","        criterion = nn.BCEWithLogitsLoss()\n","\n","        if args.resume:\n","            resumed_data = torch.load(os.path.join(EXPT_DIR, 'latest.pth'))\n","            print(f\"Resuming from epoch {resumed_data['epoch'] + 1}\")\n","            net.load_state_dict(resumed_data['model_state_dict'])\n","            #optimizer = optimizer(net.parameters(), lr=resumed_data['lr'])\n","            optimizer = torch.optim.Adamax(net.parameters(), lr=resumed_data['lr'])\n","            optimizer.load_state_dict(resumed_data['optim_state_dict'])\n","            start_epoch = resumed_data['epoch']\n","        training_loop(net,\n","                      train_data,\n","                      val_data,\n","                      optimizer, criterion, start_epoch)\n","\n","    else:\n","        print('Evaluating...')\n","        #evaluate_saved(net, val_data)\n","        evaluate_saved(net, test_data)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700383604746,"user_tz":480,"elapsed":1828,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"423796f6-cd6d-44c6-e1d4-f7759c1c0054","id":"qCB34CDtvnKp"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Building model to train: \n","Model Overview: \n","PReFIL(\n","  (rnn): QuestionEncoder(\n","    (embedding): Embedding(51, 32)\n","    (lstm): LSTM(32, 256)\n","  )\n","  (cnn): DenseNetEncoder(\n","    (densenet): DenseNet(\n","      (first_conv): Sequential(\n","        (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","        (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu0): ReLU(inplace=True)\n","        (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","      )\n","      (final_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (denseblock): ModuleList(\n","        (0): Sequential(\n","          (dblock0): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition1): _Transition(\n","            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (1): Sequential(\n","          (dblock1): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","          (transition2): _Transition(\n","            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (relu): ReLU(inplace=True)\n","            (conv): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","          )\n","        )\n","        (2): Sequential(\n","          (dblock2): _DenseBlock(\n","            (denselayer1): _DenseLayer(\n","              (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer2): _DenseLayer(\n","              (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer3): _DenseLayer(\n","              (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer4): _DenseLayer(\n","              (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer5): _DenseLayer(\n","              (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","            (denselayer6): _DenseLayer(\n","              (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu1): ReLU(inplace=True)\n","              (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (relu2): ReLU(inplace=True)\n","              (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","            )\n","          )\n","        )\n","      )\n","    )\n","  )\n","  (bimodal_low): BimodalEmbedding(\n","    (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (bimodal_high): BimodalEmbedding(\n","    (bn): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (transform_convs): Sequential(\n","      (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (1): ReLU()\n","      (2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (3): ReLU()\n","      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (5): ReLU()\n","      (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","      (7): ReLU()\n","    )\n","  )\n","  (maxpool_low): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (rf_low): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (rf_high): RecurrentFusion(\n","    (bigru): GRU(256, 256, batch_first=True, bidirectional=True)\n","  )\n","  (classifier): Classifier(\n","    (relu): ReLU(inplace=True)\n","    (lin1): Linear(in_features=1024, out_features=1024, bias=True)\n","    (classifier): Linear(in_features=1024, out_features=1, bias=True)\n","    (drop): Dropout(p=0.5, inplace=False)\n","  )\n",")\n","Evaluating...\n","Running test, Processed 12 of 64 Saved /mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2/results_test_10.json\n"]}]},{"cell_type":"markdown","source":["### Inspect the Prediction Results"],"metadata":{"id":"8hRtFIVmvnKq"}},{"cell_type":"code","source":["#download the predictions\n","import json\n","# Change working directory to the location of the prediction result file\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/experiments/PreFil_Model_2')\n","\n","\n","with open('results_test_10.json') as f:\n","    result_test_image = (json.load(f))\n"],"metadata":{"id":"_QDlXA5gvnKq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pd.set_option('display.max_rows', None)\n","\n","\n","#we cn convert those quesiton index back to actual question by building a dictionnary of the question index and original questions that were previsouly generated\n","dict_decode_questions = {quest_index[i]: original_questions[i] for i in range(len(quest_index))}\n","\n","#then we replace the question index in the results by the original question from this decoder dictionnary\n","final_result = list((dict_decode_questions[int(idx)],value) for (idx,value) in result_test_image.items())\n","\n","#convert to dataframe and inspect\n","final_result\n","df_test = pd.DataFrame(final_result, columns=['question','predicted_answer'])\n","df_test.index = df_test.index.astype(int) #convert index to integer (it was a string)\n","df_test.replace({0:'yes', 1:'no'},inplace=True) #replace 0 by 1 and vice-versa because we inverted them before passing them into the VQA  model\n","df_test.head(220)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"executionInfo":{"status":"ok","timestamp":1700383609581,"user_tz":480,"elapsed":280,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"ec1de843-b8d3-44ad-8e75-e488bf541a91","id":"dhggq7lXvnKr"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                         question predicted_answer\n","0      [is, dark_orchid, less, than, light_green]               no\n","1   [is, dark_orchid, greater, than, light_green]               no\n","2      [is, light_green, less, than, dark_orchid]               no\n","3   [is, light_green, greater, than, dark_orchid]               no\n","4            [is, dark_orchid, the, high, median]               no\n","5             [is, dark_orchid, the, low, median]               no\n","6                 [is, dark_orchid, the, minimum]               no\n","7                 [is, dark_orchid, the, maximum]               no\n","8            [is, light_green, the, high, median]               no\n","9             [is, light_green, the, low, median]               no\n","10                [is, light_green, the, minimum]              yes\n","11                [is, light_green, the, maximum]              yes"],"text/html":["\n","  <div id=\"df-e605c6c6-70d9-49fe-b505-21a4c2496a46\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question</th>\n","      <th>predicted_answer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[is, dark_orchid, less, than, light_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[is, dark_orchid, greater, than, light_green]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[is, light_green, less, than, dark_orchid]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[is, light_green, greater, than, dark_orchid]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>[is, dark_orchid, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>[is, dark_orchid, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>[is, dark_orchid, the, minimum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>[is, dark_orchid, the, maximum]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>[is, light_green, the, high, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>[is, light_green, the, low, median]</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>[is, light_green, the, minimum]</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>[is, light_green, the, maximum]</td>\n","      <td>yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e605c6c6-70d9-49fe-b505-21a4c2496a46')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e605c6c6-70d9-49fe-b505-21a4c2496a46 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e605c6c6-70d9-49fe-b505-21a4c2496a46');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6a9ba35a-49a0-4059-a289-e2e0545aaf9b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a9ba35a-49a0-4059-a289-e2e0545aaf9b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6a9ba35a-49a0-4059-a289-e2e0545aaf9b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":[],"metadata":{"id":"8xlnZHM9vnKr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Homebrew Charts - Hsowing impact of label oritentation on chart type prediction\n","Charts created manually in excel"],"metadata":{"id":"kZB9A-zesM_A"}},{"cell_type":"markdown","source":["### Parameters to tweak"],"metadata":{"id":"Jfa-uq81sSNd"}},{"cell_type":"code","source":["##############################################\n","#######   PARAMETERS TO TWEAK   ##############\n","##############################################\n","\n","#load global dictionnary that was trained on training dataset (build in part 1)\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","with open('global_dictionnary.txt','r') as f:\n","  text = f.read()\n","  global_dictionnary = eval(text)\n","#alternatively, uncomment the below line\n","#global_dictionnary = {'is': 30, 'the': 31, 'minimum': 32, 'maximum': 33, 'greater': 34, 'than': 35, 'less': 36, 'high': 37, 'median': 38, 'low': 39, 'does': 40, 'have': 41, 'area': 42, 'under': 43, 'curve': 44, 'smoothest': 45, 'roughest': 46, 'lowest': 47, 'value': 48, 'highest': 49, 'intersect': 50}\n","\n","\n","# Enter working directory where image to predict is\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/test')\n","#os.chdir('/content/gdrive/MyDrive/NorthWestern University/Course/AI Capstone/Data/datasets/train1/png')\n","\n","# Enter Image name\n","img_name = \"Picture1.png\"\n","\n","#specify lenght for padding (based on trainign dataset from part 1 as well)\n","padding_length = 9\n","\n","#specifcy the distance at which nearby labels in the images hsoud be merged during OCR extraction (ex: merging the words 'organic' and 'search' as a single token 'organic_search')\n","dist_limit=6\n","\n","#change the chart type decoder here if needed (make sure the chart types are in the same order as their encoding in the model)\n","chart_type_decoding_values = ['dot_line','hbar_categorical', 'line','pie','vbar_categorical']"],"metadata":{"id":"X2rUIa9AsSNd","executionInfo":{"status":"ok","timestamp":1701053747440,"user_tz":480,"elapsed":176,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}}},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":["### Run the below cells as is"],"metadata":{"id":"4ovuv2TfsSNd"}},{"cell_type":"code","source":["#run as is\n","result = generating_questions(img_name,global_dictionnary,padding_length,dist_limit)\n","\n","#can isolate each output from the function as follows:\n","original_questions = result[0]\n","encoded_questions = result[1]\n","img_name_array = result[2]\n","quest_index = result[3]\n","encoded_answers = torch.zeros((1,)) # WE DO NOT HAVE ANSWERS FOR TEST IMAGES, so passing an empty tensor\n","\n","print(original_questions)\n","print(encoded_questions)\n","print(img_name_array)\n","\n","#The tensor batched training Dataset object is created\n","test_preprocess_input = ImageDataset(img_name_array,encoded_questions,encoded_answers,quest_index,'test') #Preprocessing function is applied to the dataset\n","test_preprocess_input = DataLoader(test_preprocess_input,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701053769226,"user_tz":480,"elapsed":12409,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"db27c7a0-6ee4-4bf1-8bd5-dcc573928525","id":"fIfL4WZdsSNd"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 8s 8s/step\n","this graph is a  vbar_categorical chart\n","this chart contains the labels ['paid_social', 'paid_search', 'organic_search']\n","[['is', 'paid_social', 'the', 'maximum'], ['is', 'paid_social', 'the', 'minimum'], ['is', 'paid_social', 'the', 'low', 'median'], ['is', 'paid_social', 'the', 'high', 'median'], ['is', 'paid_search', 'the', 'maximum'], ['is', 'paid_search', 'the', 'minimum'], ['is', 'paid_search', 'the', 'low', 'median'], ['is', 'paid_search', 'the', 'high', 'median'], ['is', 'organic_search', 'the', 'maximum'], ['is', 'organic_search', 'the', 'minimum'], ['is', 'organic_search', 'the', 'low', 'median'], ['is', 'organic_search', 'the', 'high', 'median'], ['is', 'paid_social', 'greater', 'than', 'paid_search'], ['is', 'paid_social', 'less', 'than', 'paid_search'], ['is', 'paid_social', 'greater', 'than', 'organic_search'], ['is', 'paid_social', 'less', 'than', 'organic_search'], ['is', 'paid_search', 'greater', 'than', 'paid_social'], ['is', 'paid_search', 'less', 'than', 'paid_social'], ['is', 'paid_search', 'greater', 'than', 'organic_search'], ['is', 'paid_search', 'less', 'than', 'organic_search'], ['is', 'organic_search', 'greater', 'than', 'paid_social'], ['is', 'organic_search', 'less', 'than', 'paid_social'], ['is', 'organic_search', 'greater', 'than', 'paid_search'], ['is', 'organic_search', 'less', 'than', 'paid_search']]\n","[[30  3 31 33  0  0  0  0  0]\n"," [30  3 31 32  0  0  0  0  0]\n"," [30  3 31 39 38  0  0  0  0]\n"," [30  3 31 37 38  0  0  0  0]\n"," [30  2 31 33  0  0  0  0  0]\n"," [30  2 31 32  0  0  0  0  0]\n"," [30  2 31 39 38  0  0  0  0]\n"," [30  2 31 37 38  0  0  0  0]\n"," [30  1 31 33  0  0  0  0  0]\n"," [30  1 31 32  0  0  0  0  0]\n"," [30  1 31 39 38  0  0  0  0]\n"," [30  1 31 37 38  0  0  0  0]\n"," [30  3 34 35  2  0  0  0  0]\n"," [30  3 36 35  2  0  0  0  0]\n"," [30  3 34 35  1  0  0  0  0]\n"," [30  3 36 35  1  0  0  0  0]\n"," [30  2 34 35  3  0  0  0  0]\n"," [30  2 36 35  3  0  0  0  0]\n"," [30  2 34 35  1  0  0  0  0]\n"," [30  2 36 35  1  0  0  0  0]\n"," [30  1 34 35  3  0  0  0  0]\n"," [30  1 36 35  3  0  0  0  0]\n"," [30  1 34 35  2  0  0  0  0]\n"," [30  1 36 35  2  0  0  0  0]]\n","['Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png', 'Picture1.png']\n"]}]},{"cell_type":"code","source":["#display the image\n","img = load_img(img_name)\n","plt.imshow(img)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":485},"executionInfo":{"status":"ok","timestamp":1701053769454,"user_tz":480,"elapsed":231,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"c029cd3c-7788-4d68-8384-e9eb5b7ac226","id":"bMz5ytaAsSNd"},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Parameters to tweak"],"metadata":{"id":"JgOKCmEbtWw8"}},{"cell_type":"code","source":["##############################################\n","#######   PARAMETERS TO TWEAK   ##############\n","##############################################\n","\n","#load global dictionnary that was trained on training dataset (build in part 1)\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/train1')\n","with open('global_dictionnary.txt','r') as f:\n","  text = f.read()\n","  global_dictionnary = eval(text)\n","#alternatively, uncomment the below line\n","#global_dictionnary = {'is': 30, 'the': 31, 'minimum': 32, 'maximum': 33, 'greater': 34, 'than': 35, 'less': 36, 'high': 37, 'median': 38, 'low': 39, 'does': 40, 'have': 41, 'area': 42, 'under': 43, 'curve': 44, 'smoothest': 45, 'roughest': 46, 'lowest': 47, 'value': 48, 'highest': 49, 'intersect': 50}\n","\n","\n","# Enter working directory where image to predict is\n","os.chdir('/mnt/gs/dynamic-chart-vqa-train-data/test')\n","#os.chdir('/content/gdrive/MyDrive/NorthWestern University/Course/AI Capstone/Data/datasets/train1/png')\n","\n","# Enter Image name\n","img_name = \"Picture1b.png\"\n","\n","#specify lenght for padding (based on trainign dataset from part 1 as well)\n","padding_length = 9\n","\n","#specifcy the distance at which nearby labels in the images hsoud be merged during OCR extraction (ex: merging the words 'organic' and 'search' as a single token 'organic_search')\n","dist_limit=5\n","\n","#change the chart type decoder here if needed (make sure the chart types are in the same order as their encoding in the model)\n","chart_type_decoding_values = ['dot_line','hbar_categorical', 'line','pie','vbar_categorical']"],"metadata":{"executionInfo":{"status":"ok","timestamp":1701054099995,"user_tz":480,"elapsed":165,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"id":"AaTWwsGMtWxE"},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":["### Run the below cells as is"],"metadata":{"id":"QxdQG3OqtWxE"}},{"cell_type":"code","source":["#run as is\n","result = generating_questions(img_name,global_dictionnary,padding_length,dist_limit)\n","\n","#can isolate each output from the function as follows:\n","original_questions = result[0]\n","encoded_questions = result[1]\n","img_name_array = result[2]\n","quest_index = result[3]\n","encoded_answers = torch.zeros((1,)) # WE DO NOT HAVE ANSWERS FOR TEST IMAGES, so passing an empty tensor\n","\n","print(original_questions)\n","print(encoded_questions)\n","print(img_name_array)\n","\n","#The tensor batched training Dataset object is created\n","test_preprocess_input = ImageDataset(img_name_array,encoded_questions,encoded_answers,quest_index,'test') #Preprocessing function is applied to the dataset\n","test_preprocess_input = DataLoader(test_preprocess_input,BATCH_SIZE,shuffle=False, collate_fn=collate_batch,num_workers=8)#The dataset is batched\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BoVUcPOitb2r","executionInfo":{"status":"ok","timestamp":1701054102387,"user_tz":480,"elapsed":1037,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"d5ba7e68-7f86-491b-f252-42a5d074291c"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 238ms/step\n","this graph is a  dot_line chart\n","this chart contains the labels ['organic_search', 'paid_search']\n","[['does', 'organic_search', 'have', 'the', 'maximum', 'area', 'under', 'the', 'curve'], ['does', 'organic_search', 'have', 'the', 'minimum', 'area', 'under', 'the', 'curve'], ['is', 'organic_search', 'the', 'smoothest'], ['is', 'organic_search', 'the', 'roughest'], ['does', 'organic_search', 'have', 'the', 'lowest', 'value'], ['does', 'organic_search', 'have', 'the', 'highest', 'value'], ['does', 'paid_search', 'have', 'the', 'maximum', 'area', 'under', 'the', 'curve'], ['does', 'paid_search', 'have', 'the', 'minimum', 'area', 'under', 'the', 'curve'], ['is', 'paid_search', 'the', 'smoothest'], ['is', 'paid_search', 'the', 'roughest'], ['does', 'paid_search', 'have', 'the', 'lowest', 'value'], ['does', 'paid_search', 'have', 'the', 'highest', 'value'], ['is', 'organic_search', 'greater', 'than', 'paid_search'], ['is', 'organic_search', 'less', 'than', 'paid_search'], ['does', 'paid_search', 'intersect', 'organic_search'], ['is', 'paid_search', 'greater', 'than', 'organic_search'], ['is', 'paid_search', 'less', 'than', 'organic_search'], ['does', 'organic_search', 'intersect', 'paid_search']]\n","[[40  1 41 31 33 42 43 31 44]\n"," [40  1 41 31 32 42 43 31 44]\n"," [30  1 31 45  0  0  0  0  0]\n"," [30  1 31 46  0  0  0  0  0]\n"," [40  1 41 31 47 48  0  0  0]\n"," [40  1 41 31 49 48  0  0  0]\n"," [40  2 41 31 33 42 43 31 44]\n"," [40  2 41 31 32 42 43 31 44]\n"," [30  2 31 45  0  0  0  0  0]\n"," [30  2 31 46  0  0  0  0  0]\n"," [40  2 41 31 47 48  0  0  0]\n"," [40  2 41 31 49 48  0  0  0]\n"," [30  1 34 35  2  0  0  0  0]\n"," [30  1 36 35  2  0  0  0  0]\n"," [40  2 50  1  0  0  0  0  0]\n"," [30  2 34 35  1  0  0  0  0]\n"," [30  2 36 35  1  0  0  0  0]\n"," [40  1 50  2  0  0  0  0  0]]\n","['Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png', 'Picture1b.png']\n"]}]},{"cell_type":"code","source":["#display the image\n","img = load_img(img_name)\n","plt.imshow(img)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1701054010464,"user_tz":480,"elapsed":419,"user":{"displayName":"Sarah Viala","userId":"09286103043251652940"}},"outputId":"97e696ba-2caf-4c50-822d-aad480c28a28","id":"DlPVknd9tP4v"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"colab":{"machine_shape":"hm","provenance":[{"file_id":"10oD7ws4fkQQfE-Gvpbb41JAkGXWaR1UY","timestamp":1697482300495}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":false,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}